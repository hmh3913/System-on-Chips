/***************************** Include Files *********************************/
#include "xaxidma.h"
#include "xparameters.h"
#include "platform.h"
#include "xil_exception.h"
#include "xdebug.h"
#include "xscugic.h"
#include "xmatrixmul_hw.h"
#include "xmatrixmul.h"

/************************** Constant Definitions *****************************/

/*  Device hardware build related constants. */

#define DMA_DEV_ID_0		XPAR_AXIDMA_0_DEVICE_ID
#define DMA_DEV_ID_1		XPAR_AXIDMA_1_DEVICE_ID
#define RX_INTR_ID		XPAR_FABRIC_AXI_DMA_0_S2MM_INTROUT_INTR
#define TX_INTR_ID		XPAR_FABRIC_AXI_DMA_0_MM2S_INTROUT_INTR
#define INTC_DEVICE_ID          XPAR_SCUGIC_SINGLE_DEVICE_ID
#define INTC		XScuGic
#define INTC_HANDLER	XScuGic_InterruptHandler
/* Timeout loop counter for reset */
#define RESET_TIMEOUT_COUNTER	10000
/* Array length and the number of bytes to transfer */
#define ARRAY_LENGTH	32
#define RAWS		32
#define COLS		32
#define BYTES_TO_TRANSFER	4*RAWS*COLS
/************************** Function Prototypes ******************************/
#ifndef DEBUG
extern void xil_printf(const char *format, ...);
#endif
static void TxIntrHandler(void *Callback);
static void RxIntrHandler(void *Callback);
static int SetupIntrSystem(INTC * IntcInstancePtr,
			   XAxiDma * AxiDmaPtr, u16 TxIntrId, u16 RxIntrId);
static void DisableIntrSystem(INTC * IntcInstancePtr,
					u16 TxIntrId, u16 RxIntrId);
/************************** Variable Definitions *****************************/
/*
 * Device instance definitions
 */
static XAxiDma AxiDma_0;		/* Instance of the XAxiDma */
static XAxiDma AxiDma_1;		/* Instance of the XAxiDma */
static INTC Intc;	/* Instance of the Interrupt Controller */
/*
 * Flags interrupt handlers use to notify the application context the events.
 */
volatile int TxDone;
volatile int RxDone;
volatile int Error;

#define MAX 32

typedef u8 mat_a_t;
typedef u8 mat_b_t;
typedef u32 result_t;


u32 TxBuffer[ARRAY_LENGTH];
u32 RxBuffer[ARRAY_LENGTH];
/*****************************************************************************/
/**
*
* Main function
*
* This function is the main entry of the interrupt test. It does the following:
*	Set up the output terminal if UART16550 is in the hardware build
*	Initialize the DMA engine
*	Set up Tx and Rx channels
*	Set up the interrupt system for the Tx and Rx interrupts
*	Submit a transfer
*	Wait for the transfer to finish
*	Check transfer status
*	Disable Tx and Rx interrupts
*	Print test status and exit
*
* @param	None
*
* @return
*		- XST_SUCCESS if example finishes successfully
*		- XST_FAILURE if example fails.
*
* @note		None.
*
******************************************************************************/

void delay(void)
{
	for(int i = 0 ; i < 1000 ; i++)
	{}
}

int main(void)
{
	static XMatrixmul XMatrixmulInstance_Ptr;
	init_platform();
	XMatrixmul_Initialize(&XMatrixmulInstance_Ptr, XPAR_MATRIXMUL_0_DEVICE_ID);

	int Status;
	XAxiDma_Config *Config_0;
	XAxiDma_Config *Config_1;
	u32 i, j;

	u32 lm = 1;
	u32 ln = 2;
	u32 lp = 3;

	u32 m = 1 << lm;
	u32 n = 1 << ln;
	u32 p = 1 << lp;

	u32 SIZE_A = n*m;
	u32 SIZE_B = m*p;
	u32 SIZE_AB = n*p;
	mat_a_t dma_size_a = SIZE_A * sizeof(mat_a_t);
	mat_a_t dma_size_b = SIZE_B * sizeof(mat_b_t);
	result_t dma_size_ab = SIZE_AB * sizeof(result_t);



	XMatrixmul_Set_lm(&XMatrixmulInstance_Ptr, lm);
	XMatrixmul_Set_ln(&XMatrixmulInstance_Ptr, ln);
	XMatrixmul_Set_lp(&XMatrixmulInstance_Ptr, lp);

	xil_printf("Check lm = %d", XMatrixmul_Get_lm(&XMatrixmulInstance_Ptr) );
	xil_printf("Check ln = %d", XMatrixmul_Get_ln(&XMatrixmulInstance_Ptr) );
	xil_printf("Check Ip = %d", XMatrixmul_Get_lp(&XMatrixmulInstance_Ptr) );


	xil_printf("\r\n--- Entering main() --- \r\n");

	Config_0 = XAxiDma_LookupConfig(DMA_DEV_ID_0);
	Config_1 = XAxiDma_LookupConfig(DMA_DEV_ID_1);
	if (!Config_0) {
		xil_printf("No config found for %d\r\n", DMA_DEV_ID_0);

		return XST_FAILURE;
	}

	/* Initialize DMA engine */
	Status = XAxiDma_CfgInitialize(&AxiDma_0, Config_0);

	if (Status != XST_SUCCESS) {
		xil_printf("Initialization failed %d\r\n", Status);
		return XST_FAILURE;
	}

	if(XAxiDma_HasSg(&AxiDma_0)){
		xil_printf("Device configured as SG mode \r\n");
		return XST_FAILURE;
	}

	/* Set up Interrupt system  */
	Status = SetupIntrSystem(&Intc, &AxiDma_0, TX_INTR_ID, RX_INTR_ID);
	if (Status != XST_SUCCESS) {

		xil_printf("Failed intr setup\r\n");
		return XST_FAILURE;
	}

	/* Disable all interrupts before setup */

	XAxiDma_IntrDisable(&AxiDma_0, XAXIDMA_IRQ_ALL_MASK,
						XAXIDMA_DMA_TO_DEVICE);

	XAxiDma_IntrDisable(&AxiDma_0, XAXIDMA_IRQ_ALL_MASK,
				XAXIDMA_DEVICE_TO_DMA);

	/* Enable all interrupts */
	XAxiDma_IntrEnable(&AxiDma_0, XAXIDMA_IRQ_ALL_MASK,
							XAXIDMA_DMA_TO_DEVICE);


	XAxiDma_IntrEnable(&AxiDma_0, XAXIDMA_IRQ_ALL_MASK,
							XAXIDMA_DEVICE_TO_DMA);

	/**
	 * AXI_DMA_1 configuration
	 *
	 * */
	Status = XAxiDma_CfgInitialize(&AxiDma_1, Config_1);

	if (Status != XST_SUCCESS) {
		xil_printf("Initialization failed %d\r\n", Status);
		return XST_FAILURE;
	}

	if(XAxiDma_HasSg(&AxiDma_1)){
		xil_printf("Device configured as SG mode \r\n");
		return XST_FAILURE;
	}

	/* Set up Interrupt system  */
//	Status = SetupIntrSystem(&Intc, &AxiDma_0, TX_INTR_ID, RX_INTR_ID);
//	if (Status != XST_SUCCESS) {

//		xil_printf("Failed intr setup\r\n");
//		return XST_FAILURE;
//	}

	/* Disable all interrupts before setup */

//	XAxiDma_IntrDisable(&AxiDma_0, XAXIDMA_IRQ_ALL_MASK,
//						XAXIDMA_DMA_TO_DEVICE);

//	XAxiDma_IntrDisable(&AxiDma_0, XAXIDMA_IRQ_ALL_MASK,
//				XAXIDMA_DEVICE_TO_DMA);

	/* Enable all interrupts */
//	XAxiDma_IntrEnable(&AxiDma_0, XAXIDMA_IRQ_ALL_MASK,
//							XAXIDMA_DMA_TO_DEVICE);
//

//	XAxiDma_IntrEnable(&AxiDma_0, XAXIDMA_IRQ_ALL_MASK,
//							XAXIDMA_DEVICE_TO_DMA);

	/* Initialize flags before start transfer test  */



	TxDone = 0;
	RxDone = 0;
	Error = 0;

	mat_a_t A[][MAX] = {
				 {1, 1},
				 {2, 2},
				 {3, 3},
				 {4, 4}
		 };

	mat_b_t B[][MAX] = {
				 {1, 2, 3, 4, 5, 6, 7 ,8 ,9},
				 {1, 2, 3, 4, 5, 6, 7 ,8 ,9}
		 };

	result_t AB[MAX][MAX], sw_result[n][p];


//	for(i = 0; i < ARRAY_LENGTH; i ++) {
//		TxBuffer[i] = i;	// initialize TxBuffer
//		RxBuffer[i] = 0;	// initialize RxBuffer with 0's
//	}

	xil_printf("=========================================================\r\n");
	xil_printf("Show matrix A\r\n");
	for (i = 0; i < n; i++) {
		for (j = 0; j < m; j++) {
			xil_printf("%d ", A[i][j]);
		}
		xil_printf("\r\n");
	}

	xil_printf("Show matrix B\r\n");
	for (i = 0; i < m; i++) {
		for (j = 0; j < p; j++) {
			xil_printf("%d ", B[i][j]);
		}
		xil_printf("\r\n");
	}

	/* Flush the SrcBuffer before the DMA transfer, in case the Data Cache is enabled */
	Xil_DCacheFlushRange((u8)A, BYTES_TO_TRANSFER);

	Status = XAxiDma_SimpleTransfer(&AxiDma_0,(u8)A, matrix_A_size, XAXIDMA_DMA_TO_DEVICE);
	if (Status != XST_SUCCESS) {
		xil_printf("SEND DMA A is Failed\r\n");
		return XST_FAILURE;
	}

	delay();
	Xil_DCacheFlushRange((u8)B, BYTES_TO_TRANSFER);

	Status = XAxiDma_SimpleTransfer(&AxiDma_1,(u8) B, matrix_B_size, XAXIDMA_DMA_TO_DEVICE);
	if (Status != XST_SUCCESS) {
		xil_printf("SEND DMA B is Failed\r\n");
		return XST_FAILURE;
	}

	delay();

	Status = XAxiDma_SimpleTransfer(&AxiDma_0,(u32)AB, matrix_AB_size, XAXIDMA_DEVICE_TO_DMA);
	if (Status != XST_SUCCESS) {
		xil_printf("SEND DMA AM is Failed\r\n");
		return XST_FAILURE;
	}

	/* Wait TX done and RX done */
	while (!TxDone && !RxDone && !Error) { /* NOP */ }

	if (Error) {
		xil_printf("Failed test transmit %s done, receive %s done\r\n", TxDone? "":" not", RxDone? "":" not");
	}

	/* Invalidate the DestBuffer before checking the data, in case the Data Cache is enabled */
	Xil_DCacheInvalidateRange((u32)AB, matrix_AB_size);

	xil_printf("=========================================================\r\n");

	for (i = 0; i < n; i++) {
		for (j = 0; j < p; j++) {
			xil_printf("%d ", AB[i][j]);
		}
		xil_printf("\r\n");
	}
	// check received data
//	for(i = 0; i < ARRAY_LENGTH; i++) {
//		if(RxBuffer[i] != i+5){
//			xil_printf("Error : RxBuffer[%d] = %d \r\n", i, RxBuffer[i]);}
//		else
//			xil_printf("RxBuffer[%d] = %d \r\n", i, RxBuffer[i]);
//	}
	xil_printf("=========================================================\r\n");
	xil_printf("AXI DMA interrupt example test passed\r\n\r\n\r\n\r\n");


	/* Disable TX and RX Ring interrupts and return success */

	DisableIntrSystem(&Intc, TX_INTR_ID, RX_INTR_ID);
	cleanup_platform();
	return XST_SUCCESS;
}

/*****************************************************************************/
/*
*
* This is the DMA TX Interrupt handler function.
*
* It gets the interrupt status from the hardware, acknowledges it, and if any
* error happens, it resets the hardware. Otherwise, if a completion interrupt
* is present, then sets the TxDone.flag
*
* @param	Callback is a pointer to TX channel of the DMA engine.
*
* @return	None.
*
* @note		None.
*
******************************************************************************/
static void TxIntrHandler(void *Callback)
{

	u32 IrqStatus;
	int TimeOut;
	XAxiDma *AxiDmaInst = (XAxiDma *)Callback;

	/* Read pending interrupts */
	IrqStatus = XAxiDma_IntrGetIrq(AxiDmaInst, XAXIDMA_DMA_TO_DEVICE);

	/* Acknowledge pending interrupts */


	XAxiDma_IntrAckIrq(AxiDmaInst, IrqStatus, XAXIDMA_DMA_TO_DEVICE);

	/*
	 * If no interrupt is asserted, we do not do anything
	 */
	if (!(IrqStatus & XAXIDMA_IRQ_ALL_MASK)) {

		return;
	}

	/*
	 * If error interrupt is asserted, raise error flag, reset the
	 * hardware to recover from the error, and return with no further
	 * processing.
	 */
	if ((IrqStatus & XAXIDMA_IRQ_ERROR_MASK)) {

		Error = 1;

		/*
		 * Reset should never fail for transmit channel
		 */
		XAxiDma_Reset(AxiDmaInst);

		TimeOut = RESET_TIMEOUT_COUNTER;

		while (TimeOut) {
			if (XAxiDma_ResetIsDone(AxiDmaInst)) {
				break;
			}

			TimeOut -= 1;
		}

		return;
	}

	/*
	 * If Completion interrupt is asserted, then set the TxDone flag
	 */
	if ((IrqStatus & XAXIDMA_IRQ_IOC_MASK)) {

		TxDone = 1;
	}
}

/*****************************************************************************/
/*
*
* This is the DMA RX interrupt handler function
*
* It gets the interrupt status from the hardware, acknowledges it, and if any
* error happens, it resets the hardware. Otherwise, if a completion interrupt
* is present, then it sets the RxDone flag.
*
* @param	Callback is a pointer to RX channel of the DMA engine.
*
* @return	None.
*
* @note		None.
*
******************************************************************************/
static void RxIntrHandler(void *Callback)
{
	u32 IrqStatus;
	int TimeOut;
	XAxiDma *AxiDmaInst = (XAxiDma *)Callback;

	/* Read pending interrupts */
	IrqStatus = XAxiDma_IntrGetIrq(AxiDmaInst, XAXIDMA_DEVICE_TO_DMA);

	/* Acknowledge pending interrupts */
	XAxiDma_IntrAckIrq(AxiDmaInst, IrqStatus, XAXIDMA_DEVICE_TO_DMA);

	/*
	 * If no interrupt is asserted, we do not do anything
	 */
	if (!(IrqStatus & XAXIDMA_IRQ_ALL_MASK)) {
		return;
	}

	/*
	 * If error interrupt is asserted, raise error flag, reset the
	 * hardware to recover from the error, and return with no further
	 * processing.
	 */
	if ((IrqStatus & XAXIDMA_IRQ_ERROR_MASK)) {

		Error = 1;

		/* Reset could fail and hang
		 * NEED a way to handle this or do not call it??
		 */
		XAxiDma_Reset(AxiDmaInst);

		TimeOut = RESET_TIMEOUT_COUNTER;

		while (TimeOut) {
			if(XAxiDma_ResetIsDone(AxiDmaInst)) {
				break;
			}

			TimeOut -= 1;
		}

		return;
	}

	/*
	 * If completion interrupt is asserted, then set RxDone flag
	 */
	if ((IrqStatus & XAXIDMA_IRQ_IOC_MASK)) {

		RxDone = 1;
	}
}

/*****************************************************************************/
/*
*
* This function setups the interrupt system so interrupts can occur for the
* DMA, it assumes INTC component exists in the hardware system.
*
* @param	IntcInstancePtr is a pointer to the instance of the INTC.
* @param	AxiDmaPtr is a pointer to the instance of the DMA engine
* @param	TxIntrId is the TX channel Interrupt ID.
* @param	RxIntrId is the RX channel Interrupt ID.
*
* @return
*		- XST_SUCCESS if successful,
*		- XST_FAILURE.if not succesful
*
* @note		None.
*
******************************************************************************/
static int SetupIntrSystem(INTC * IntcInstancePtr,
			   XAxiDma * AxiDmaPtr, u16 TxIntrId, u16 RxIntrId)
{
	int Status;

#ifdef XPAR_INTC_0_DEVICE_ID

	/* Initialize the interrupt controller and connect the ISRs */
	Status = XIntc_Initialize(IntcInstancePtr, INTC_DEVICE_ID);
	if (Status != XST_SUCCESS) {

		xil_printf("Failed init intc\r\n");
		return XST_FAILURE;
	}

	Status = XIntc_Connect(IntcInstancePtr, TxIntrId,
			       (XInterruptHandler) TxIntrHandler, AxiDmaPtr);
	if (Status != XST_SUCCESS) {

		xil_printf("Failed tx connect intc\r\n");
		return XST_FAILURE;
	}

	Status = XIntc_Connect(IntcInstancePtr, RxIntrId,
			       (XInterruptHandler) RxIntrHandler, AxiDmaPtr);
	if (Status != XST_SUCCESS) {

		xil_printf("Failed rx connect intc\r\n");
		return XST_FAILURE;
	}

	/* Start the interrupt controller */
	Status = XIntc_Start(IntcInstancePtr, XIN_REAL_MODE);
	if (Status != XST_SUCCESS) {

		xil_printf("Failed to start intc\r\n");
		return XST_FAILURE;
	}

	XIntc_Enable(IntcInstancePtr, TxIntrId);
	XIntc_Enable(IntcInstancePtr, RxIntrId);

#else

	XScuGic_Config *IntcConfig;


	/*
	 * Initialize the interrupt controller driver so that it is ready to
	 * use.
	 */
	IntcConfig = XScuGic_LookupConfig(INTC_DEVICE_ID);
	if (NULL == IntcConfig) {
		return XST_FAILURE;
	}

	Status = XScuGic_CfgInitialize(IntcInstancePtr, IntcConfig,
					IntcConfig->CpuBaseAddress);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}


	XScuGic_SetPriorityTriggerType(IntcInstancePtr, TxIntrId, 0xA0, 0x3);

	XScuGic_SetPriorityTriggerType(IntcInstancePtr, RxIntrId, 0xA0, 0x3);
	/*
	 * Connect the device driver handler that will be called when an
	 * interrupt for the device occurs, the handler defined above performs
	 * the specific interrupt processing for the device.
	 */
	Status = XScuGic_Connect(IntcInstancePtr, TxIntrId,
				(Xil_InterruptHandler)TxIntrHandler,
				AxiDmaPtr);
	if (Status != XST_SUCCESS) {
		return Status;
	}

	Status = XScuGic_Connect(IntcInstancePtr, RxIntrId,
				(Xil_InterruptHandler)RxIntrHandler,
				AxiDmaPtr);
	if (Status != XST_SUCCESS) {
		return Status;
	}

	XScuGic_Enable(IntcInstancePtr, TxIntrId);
	XScuGic_Enable(IntcInstancePtr, RxIntrId);


#endif

	/* Enable interrupts from the hardware */

	Xil_ExceptionInit();
	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,
			(Xil_ExceptionHandler)INTC_HANDLER,
			(void *)IntcInstancePtr);

	Xil_ExceptionEnable();

	return XST_SUCCESS;
}

/*****************************************************************************/
/**
*
* This function disables the interrupts for DMA engine.
*
* @param	IntcInstancePtr is the pointer to the INTC component instance
* @param	TxIntrId is interrupt ID associated w/ DMA TX channel
* @param	RxIntrId is interrupt ID associated w/ DMA RX channel
*
* @return	None.
*
* @note		None.
*
******************************************************************************/
static void DisableIntrSystem(INTC * IntcInstancePtr,
					u16 TxIntrId, u16 RxIntrId)
{
#ifdef XPAR_INTC_0_DEVICE_ID
	/* Disconnect the interrupts for the DMA TX and RX channels */
	XIntc_Disconnect(IntcInstancePtr, TxIntrId);
	XIntc_Disconnect(IntcInstancePtr, RxIntrId);
#else
	XScuGic_Disconnect(IntcInstancePtr, TxIntrId);
	XScuGic_Disconnect(IntcInstancePtr, RxIntrId);
#endif
}
