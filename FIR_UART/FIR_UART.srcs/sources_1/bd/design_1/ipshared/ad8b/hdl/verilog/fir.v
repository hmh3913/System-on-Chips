// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fir,hls_ip_2018_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.232000,HLS_SYN_LAT=783,HLS_SYN_TPT=none,HLS_SYN_MEM=5,HLS_SYN_DSP=14,HLS_SYN_FF=1848,HLS_SYN_LUT=3603,HLS_VERSION=2018_2}" *)

module fir (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP
);

parameter    ap_ST_fsm_state1 = 23'd1;
parameter    ap_ST_fsm_state2 = 23'd2;
parameter    ap_ST_fsm_state3 = 23'd4;
parameter    ap_ST_fsm_state4 = 23'd8;
parameter    ap_ST_fsm_state5 = 23'd16;
parameter    ap_ST_fsm_state6 = 23'd32;
parameter    ap_ST_fsm_state7 = 23'd64;
parameter    ap_ST_fsm_state8 = 23'd128;
parameter    ap_ST_fsm_state9 = 23'd256;
parameter    ap_ST_fsm_state10 = 23'd512;
parameter    ap_ST_fsm_state11 = 23'd1024;
parameter    ap_ST_fsm_state12 = 23'd2048;
parameter    ap_ST_fsm_state13 = 23'd4096;
parameter    ap_ST_fsm_state14 = 23'd8192;
parameter    ap_ST_fsm_state15 = 23'd16384;
parameter    ap_ST_fsm_state16 = 23'd32768;
parameter    ap_ST_fsm_state17 = 23'd65536;
parameter    ap_ST_fsm_state18 = 23'd131072;
parameter    ap_ST_fsm_state19 = 23'd262144;
parameter    ap_ST_fsm_state20 = 23'd524288;
parameter    ap_ST_fsm_state21 = 23'd1048576;
parameter    ap_ST_fsm_state22 = 23'd2097152;
parameter    ap_ST_fsm_state23 = 23'd4194304;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 11;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [22:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] y_1_data_reg;
reg    y_1_vld_reg;
reg    y_1_vld_in;
reg    y_1_ack_in;
wire   [5:0] c_address0;
reg    c_ce0;
wire   [63:0] c_q0;
wire   [31:0] x;
reg   [31:0] x_0_data_reg;
reg    x_0_vld_reg;
reg    x_0_ack_out;
reg   [5:0] shift_reg_address0;
reg    shift_reg_ce0;
reg    shift_reg_we0;
reg   [31:0] shift_reg_d0;
wire   [31:0] shift_reg_q0;
reg   [31:0] x_read_reg_368;
wire    ap_CS_fsm_state2;
wire  signed [31:0] i_cast_fu_195_p1;
reg  signed [31:0] i_cast_reg_374;
wire    ap_CS_fsm_state3;
wire   [0:0] tmp_s_fu_207_p2;
reg   [0:0] tmp_s_reg_383;
wire   [0:0] tmp_fu_199_p3;
reg   [0:0] p_Result_s_reg_392;
wire   [31:0] p_Val2_2_fu_340_p3;
reg   [31:0] p_Val2_2_reg_397;
wire    ap_CS_fsm_state4;
wire   [6:0] grp_fu_188_p2;
reg   [6:0] i_1_reg_408;
wire    ap_CS_fsm_state9;
wire   [63:0] grp_fu_184_p1;
reg   [63:0] tmp_9_reg_418;
wire    ap_CS_fsm_state10;
reg   [63:0] c_load_reg_423;
wire   [63:0] grp_fu_180_p2;
reg   [63:0] tmp_2_reg_428;
wire    ap_CS_fsm_state16;
wire   [63:0] grp_fu_175_p2;
wire    ap_CS_fsm_state21;
wire   [31:0] p_Val2_4_fu_361_p3;
wire    ap_CS_fsm_state22;
reg   [63:0] x_assign_reg_141;
wire  signed [6:0] ap_phi_mux_i_phi_fu_157_p4;
reg  signed [6:0] i_reg_153;
reg   [31:0] data1_reg_165;
wire   [63:0] tmp_7_fu_213_p1;
wire   [63:0] tmp_8_fu_348_p1;
wire   [63:0] tmp_1_fu_352_p1;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state5;
reg  signed [6:0] grp_fu_188_p0;
wire   [63:0] p_Val2_s_fu_218_p1;
wire   [51:0] loc_V_1_fu_240_p1;
wire   [53:0] tmp_1_i_i_i_fu_244_p4;
wire   [10:0] loc_V_fu_230_p4;
wire   [11:0] tmp_i_i_i_i_cast1_fu_258_p1;
wire   [11:0] sh_assign_fu_262_p2;
wire   [10:0] tmp_3_i_i_i_fu_276_p2;
wire   [0:0] isNeg_fu_268_p3;
wire  signed [11:0] tmp_3_i_i_i_cast_fu_282_p1;
wire   [11:0] sh_assign_1_fu_286_p3;
wire  signed [31:0] sh_assign_1_cast_fu_294_p1;
wire   [53:0] tmp_5_i_i_i_cast_fu_302_p1;
wire   [136:0] tmp_1_i_i_i_cast_fu_254_p1;
wire   [136:0] tmp_5_i_i_i_fu_298_p1;
wire   [53:0] tmp_6_i_i_i_fu_306_p2;
wire   [0:0] tmp_12_fu_318_p3;
wire   [136:0] tmp_8_i_i_i_fu_312_p2;
wire   [31:0] tmp_4_fu_326_p1;
wire   [31:0] tmp_5_fu_330_p4;
wire   [31:0] p_Val2_6_i_i_i_fu_356_p2;
wire    ap_CS_fsm_state23;
reg   [22:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 23'd1;
#0 y_1_data_reg = 32'd0;
#0 y_1_vld_reg = 1'b0;
#0 x_0_data_reg = 32'd0;
#0 x_0_vld_reg = 1'b0;
end

fir_shift_reg #(
    .DataWidth( 32 ),
    .AddressRange( 41 ),
    .AddressWidth( 6 ))
shift_reg_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(shift_reg_address0),
    .ce0(shift_reg_ce0),
    .we0(shift_reg_we0),
    .d0(shift_reg_d0),
    .q0(shift_reg_q0)
);

fir_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
fir_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .y(y_1_data_reg),
    .y_ap_vld(y_1_vld_reg),
    .c_address0(c_address0),
    .c_ce0(c_ce0),
    .c_q0(c_q0),
    .x(x)
);

fir_dadd_64ns_64nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
fir_dadd_64ns_64nbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(x_assign_reg_141),
    .din1(tmp_2_reg_428),
    .ce(1'b1),
    .dout(grp_fu_175_p2)
);

fir_dmul_64ns_64ncud #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
fir_dmul_64ns_64ncud_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_9_reg_418),
    .din1(c_load_reg_423),
    .ce(1'b1),
    .dout(grp_fu_180_p2)
);

fir_sitodp_32ns_6dEe #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
fir_sitodp_32ns_6dEe_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(data1_reg_165),
    .ce(1'b1),
    .dout(grp_fu_184_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (tmp_s_reg_383 == 1'd0))) begin
        data1_reg_165 <= shift_reg_q0;
    end else if (((1'b1 == ap_CS_fsm_state3) & (tmp_fu_199_p3 == 1'd0) & (tmp_s_fu_207_p2 == 1'd1))) begin
        data1_reg_165 <= x_read_reg_368;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        i_reg_153 <= i_1_reg_408;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_153 <= 7'd40;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        x_assign_reg_141 <= grp_fu_175_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        x_assign_reg_141 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (y_1_vld_reg == 1'b0) & (y_1_vld_in == 1'b1))) begin
        y_1_vld_reg <= 1'b1;
    end else if (((y_1_vld_in == 1'b0) & (1'b1 == 1'b1) & (y_1_vld_reg == 1'b1))) begin
        y_1_vld_reg <= 1'b0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        c_load_reg_423 <= c_q0;
        tmp_9_reg_418 <= grp_fu_184_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_1_reg_408 <= grp_fu_188_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_cast_reg_374 <= i_cast_fu_195_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_fu_199_p3 == 1'd1))) begin
        p_Result_s_reg_392 <= p_Val2_s_fu_218_p1[32'd63];
        p_Val2_2_reg_397 <= p_Val2_2_fu_340_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        tmp_2_reg_428 <= grp_fu_180_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_fu_199_p3 == 1'd0))) begin
        tmp_s_reg_383 <= tmp_s_fu_207_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (x_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (x_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (x_0_vld_reg == 1'b1)))) begin
        x_0_data_reg <= x;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        x_read_reg_368 <= x_0_data_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (y_1_vld_reg == 1'b0) & (y_1_vld_in == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == 1'b1) & (y_1_vld_in == 1'b1) & (y_1_vld_reg == 1'b1)))) begin
        y_1_data_reg <= p_Val2_4_fu_361_p3;
    end
end

always @ (*) begin
    if (((y_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((y_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        c_ce0 = 1'b1;
    end else begin
        c_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_188_p0 = i_reg_153;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_188_p0 = ap_phi_mux_i_phi_fu_157_p4;
    end else begin
        grp_fu_188_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        shift_reg_address0 = tmp_8_fu_348_p1;
    end else if (((1'b1 == ap_CS_fsm_state3) & (tmp_fu_199_p3 == 1'd0) & (tmp_s_fu_207_p2 == 1'd1))) begin
        shift_reg_address0 = 6'd0;
    end else if (((1'b1 == ap_CS_fsm_state3) & (tmp_fu_199_p3 == 1'd0) & (tmp_s_fu_207_p2 == 1'd0))) begin
        shift_reg_address0 = tmp_7_fu_213_p1;
    end else begin
        shift_reg_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state3) & (tmp_fu_199_p3 == 1'd0) & (tmp_s_fu_207_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state3) & (tmp_fu_199_p3 == 1'd0) & (tmp_s_fu_207_p2 == 1'd0)))) begin
        shift_reg_ce0 = 1'b1;
    end else begin
        shift_reg_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        shift_reg_d0 = shift_reg_q0;
    end else if (((1'b1 == ap_CS_fsm_state3) & (tmp_fu_199_p3 == 1'd0) & (tmp_s_fu_207_p2 == 1'd1))) begin
        shift_reg_d0 = x_read_reg_368;
    end else begin
        shift_reg_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (tmp_s_reg_383 == 1'd0)) | ((1'b1 == ap_CS_fsm_state3) & (tmp_fu_199_p3 == 1'd0) & (tmp_s_fu_207_p2 == 1'd1)))) begin
        shift_reg_we0 = 1'b1;
    end else begin
        shift_reg_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((y_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
        x_0_ack_out = 1'b1;
    end else begin
        x_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((y_1_vld_reg == 1'b0) | ((1'b1 == 1'b1) & (y_1_vld_reg == 1'b1)))) begin
        y_1_ack_in = 1'b1;
    end else begin
        y_1_ack_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        y_1_vld_in = 1'b1;
    end else begin
        y_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (tmp_fu_199_p3 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            if (((y_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_phi_mux_i_phi_fu_157_p4 = i_reg_153;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign c_address0 = tmp_1_fu_352_p1;

assign grp_fu_188_p2 = ($signed(grp_fu_188_p0) + $signed(7'd127));

assign i_cast_fu_195_p1 = i_reg_153;

assign isNeg_fu_268_p3 = sh_assign_fu_262_p2[32'd11];

assign loc_V_1_fu_240_p1 = p_Val2_s_fu_218_p1[51:0];

assign loc_V_fu_230_p4 = {{p_Val2_s_fu_218_p1[62:52]}};

assign p_Val2_2_fu_340_p3 = ((isNeg_fu_268_p3[0:0] === 1'b1) ? tmp_4_fu_326_p1 : tmp_5_fu_330_p4);

assign p_Val2_4_fu_361_p3 = ((p_Result_s_reg_392[0:0] === 1'b1) ? p_Val2_6_i_i_i_fu_356_p2 : p_Val2_2_reg_397);

assign p_Val2_6_i_i_i_fu_356_p2 = (32'd0 - p_Val2_2_reg_397);

assign p_Val2_s_fu_218_p1 = x_assign_reg_141;

assign sh_assign_1_cast_fu_294_p1 = $signed(sh_assign_1_fu_286_p3);

assign sh_assign_1_fu_286_p3 = ((isNeg_fu_268_p3[0:0] === 1'b1) ? tmp_3_i_i_i_cast_fu_282_p1 : sh_assign_fu_262_p2);

assign sh_assign_fu_262_p2 = ($signed(12'd3073) + $signed(tmp_i_i_i_i_cast1_fu_258_p1));

assign tmp_12_fu_318_p3 = tmp_6_i_i_i_fu_306_p2[32'd53];

assign tmp_1_fu_352_p1 = $unsigned(i_cast_reg_374);

assign tmp_1_i_i_i_cast_fu_254_p1 = tmp_1_i_i_i_fu_244_p4;

assign tmp_1_i_i_i_fu_244_p4 = {{{{1'd1}, {loc_V_1_fu_240_p1}}}, {1'd0}};

assign tmp_3_i_i_i_cast_fu_282_p1 = $signed(tmp_3_i_i_i_fu_276_p2);

assign tmp_3_i_i_i_fu_276_p2 = (11'd1023 - loc_V_fu_230_p4);

assign tmp_4_fu_326_p1 = tmp_12_fu_318_p3;

assign tmp_5_fu_330_p4 = {{tmp_8_i_i_i_fu_312_p2[84:53]}};

assign tmp_5_i_i_i_cast_fu_302_p1 = $unsigned(sh_assign_1_cast_fu_294_p1);

assign tmp_5_i_i_i_fu_298_p1 = $unsigned(sh_assign_1_cast_fu_294_p1);

assign tmp_6_i_i_i_fu_306_p2 = tmp_1_i_i_i_fu_244_p4 >> tmp_5_i_i_i_cast_fu_302_p1;

assign tmp_7_fu_213_p1 = grp_fu_188_p2;

assign tmp_8_fu_348_p1 = $unsigned(i_cast_reg_374);

assign tmp_8_i_i_i_fu_312_p2 = tmp_1_i_i_i_cast_fu_254_p1 << tmp_5_i_i_i_fu_298_p1;

assign tmp_fu_199_p3 = i_reg_153[32'd6];

assign tmp_i_i_i_i_cast1_fu_258_p1 = loc_V_fu_230_p4;

assign tmp_s_fu_207_p2 = ((i_reg_153 == 7'd0) ? 1'b1 : 1'b0);

endmodule //fir
