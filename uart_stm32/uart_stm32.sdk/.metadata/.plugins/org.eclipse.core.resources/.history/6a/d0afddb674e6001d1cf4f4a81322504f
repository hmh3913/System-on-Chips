
#include "xparameters.h"
#include "xstatus.h"
#include "xuartlite.h"
#include "xil_printf.h"

#define UARTLITE_DEVICE_ID          XPAR_AXI_UARTLITE_0_DEVICE_ID
#define TEST_BUFFER_SIZE 16

XStatus UartLitePolledExample(uint16_t DeviceId);
XUartLite UartLite;

uint8_t SendBuffer[TEST_BUFFER_SIZE];    /* Buffer for Transmitting Data */
uint8_t RecvBuffer[TEST_BUFFER_SIZE];    /* Buffer for Receiving Data */


int main(void)
{
    XStatus Status;
    Status = UartLitePolledExample(UARTLITE_DEVICE_ID);
    xil_printf("test start\r\n");
    if (Status != XST_SUCCESS)
    {
        return XST_FAILURE;
    }
    xil_printf("pass\r\n");

    return XST_SUCCESS;

}

XStatus UartLitePolledExample(uint16_t DeviceId)
{
    XStatus Status;
    unsigned int SentCount;
    unsigned int ReceivedCount;
    int Index;

    Status = XUartLite_Initialize(&UartLite, DeviceId);
    if (Status != XST_SUCCESS)
    {
        return XST_FAILURE;
    }

    Status = XUartLite_SelfTest(&UartLite);
    if (Status != XST_SUCCESS)
    {
        return XST_FAILURE;
    }

    for (Index = 0; Index < TEST_BUFFER_SIZE; Index++)
    {
        SendBuffer[Index] = Index;
        RecvBuffer[Index] = 0;
    }

    SentCount = XUartLite_Send(&UartLite, SendBuffer, TEST_BUFFER_SIZE);
    if (SentCount != TEST_BUFFER_SIZE)
    {
        return XST_FAILURE;
    }

    while (XUartLite_IsSending(&UartLite))
    {
    }

    ReceivedCount = XUartLite_Recv(&UartLite, RecvBuffer, TEST_BUFFER_SIZE);
    if (ReceivedCount != TEST_BUFFER_SIZE)
    {
        return XST_FAILURE;
    }

    for (Index = 0; Index < TEST_BUFFER_SIZE; Index++)
    {
        if (SendBuffer[Index] != RecvBuffer[Index])
        {
            return XST_FAILURE;
        }
    }

    return XST_SUCCESS;
}
