// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "fir.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic fir::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic fir::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<8> fir::ap_ST_fsm_state1 = "1";
const sc_lv<8> fir::ap_ST_fsm_state2 = "10";
const sc_lv<8> fir::ap_ST_fsm_state3 = "100";
const sc_lv<8> fir::ap_ST_fsm_state4 = "1000";
const sc_lv<8> fir::ap_ST_fsm_state5 = "10000";
const sc_lv<8> fir::ap_ST_fsm_state6 = "100000";
const sc_lv<8> fir::ap_ST_fsm_state7 = "1000000";
const sc_lv<8> fir::ap_ST_fsm_state8 = "10000000";
const sc_lv<32> fir::ap_const_lv32_0 = "00000000000000000000000000000000";
const int fir::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<32> fir::ap_const_lv32_1 = "1";
const sc_lv<32> fir::ap_const_lv32_2 = "10";
const sc_lv<1> fir::ap_const_lv1_0 = "0";
const sc_lv<32> fir::ap_const_lv32_3 = "11";
const sc_lv<32> fir::ap_const_lv32_4 = "100";
const sc_lv<32> fir::ap_const_lv32_5 = "101";
const sc_lv<32> fir::ap_const_lv32_6 = "110";
const sc_lv<5> fir::ap_const_lv5_A = "1010";
const sc_lv<1> fir::ap_const_lv1_1 = "1";
const sc_lv<4> fir::ap_const_lv4_0 = "0000";
const sc_lv<5> fir::ap_const_lv5_1F = "11111";
const sc_lv<5> fir::ap_const_lv5_0 = "00000";
const sc_lv<32> fir::ap_const_lv32_7 = "111";
const bool fir::ap_const_boolean_1 = true;

fir::fir(sc_module_name name) : sc_module(name), mVcdFile(0) {
    shift_reg_U = new fir_shift_reg("shift_reg_U");
    shift_reg_U->clk(ap_clk);
    shift_reg_U->reset(ap_rst_n_inv);
    shift_reg_U->address0(shift_reg_address0);
    shift_reg_U->ce0(shift_reg_ce0);
    shift_reg_U->we0(shift_reg_we0);
    shift_reg_U->d0(shift_reg_d0);
    shift_reg_U->q0(shift_reg_q0);
    fir_AXILiteS_s_axi_U = new fir_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>("fir_AXILiteS_s_axi_U");
    fir_AXILiteS_s_axi_U->AWVALID(s_axi_AXILiteS_AWVALID);
    fir_AXILiteS_s_axi_U->AWREADY(s_axi_AXILiteS_AWREADY);
    fir_AXILiteS_s_axi_U->AWADDR(s_axi_AXILiteS_AWADDR);
    fir_AXILiteS_s_axi_U->WVALID(s_axi_AXILiteS_WVALID);
    fir_AXILiteS_s_axi_U->WREADY(s_axi_AXILiteS_WREADY);
    fir_AXILiteS_s_axi_U->WDATA(s_axi_AXILiteS_WDATA);
    fir_AXILiteS_s_axi_U->WSTRB(s_axi_AXILiteS_WSTRB);
    fir_AXILiteS_s_axi_U->ARVALID(s_axi_AXILiteS_ARVALID);
    fir_AXILiteS_s_axi_U->ARREADY(s_axi_AXILiteS_ARREADY);
    fir_AXILiteS_s_axi_U->ARADDR(s_axi_AXILiteS_ARADDR);
    fir_AXILiteS_s_axi_U->RVALID(s_axi_AXILiteS_RVALID);
    fir_AXILiteS_s_axi_U->RREADY(s_axi_AXILiteS_RREADY);
    fir_AXILiteS_s_axi_U->RDATA(s_axi_AXILiteS_RDATA);
    fir_AXILiteS_s_axi_U->RRESP(s_axi_AXILiteS_RRESP);
    fir_AXILiteS_s_axi_U->BVALID(s_axi_AXILiteS_BVALID);
    fir_AXILiteS_s_axi_U->BREADY(s_axi_AXILiteS_BREADY);
    fir_AXILiteS_s_axi_U->BRESP(s_axi_AXILiteS_BRESP);
    fir_AXILiteS_s_axi_U->ACLK(ap_clk);
    fir_AXILiteS_s_axi_U->ARESET(ap_rst_n_inv);
    fir_AXILiteS_s_axi_U->ACLK_EN(ap_var_for_const0);
    fir_AXILiteS_s_axi_U->y(y_1_data_reg);
    fir_AXILiteS_s_axi_U->y_ap_vld(y_1_vld_reg);
    fir_AXILiteS_s_axi_U->c_address0(c_address0);
    fir_AXILiteS_s_axi_U->c_ce0(c_ce0);
    fir_AXILiteS_s_axi_U->c_q0(c_q0);
    fir_AXILiteS_s_axi_U->x(x);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_acc_1_fu_186_p2);
    sensitive << ( tmp_6_reg_235 );
    sensitive << ( acc_reg_107 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( y_1_ack_in );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_phi_mux_i_phi_fu_125_p4);
    sensitive << ( i_reg_121 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( y_1_ack_in );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_c_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_5_fu_177_p1 );

    SC_METHOD(thread_c_ce0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_grp_fu_143_p0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_phi_mux_i_phi_fu_125_p4 );
    sensitive << ( i_reg_121 );

    SC_METHOD(thread_grp_fu_143_p2);
    sensitive << ( grp_fu_143_p0 );

    SC_METHOD(thread_i_cast_fu_150_p1);
    sensitive << ( i_reg_121 );

    SC_METHOD(thread_shift_reg_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_1_fu_162_p2 );
    sensitive << ( tmp_fu_154_p3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_3_fu_168_p1 );
    sensitive << ( tmp_4_fu_173_p1 );

    SC_METHOD(thread_shift_reg_ce0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_1_fu_162_p2 );
    sensitive << ( tmp_fu_154_p3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_shift_reg_d0);
    sensitive << ( shift_reg_q0 );
    sensitive << ( x_read_reg_191 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_1_fu_162_p2 );
    sensitive << ( tmp_fu_154_p3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_shift_reg_we0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_1_fu_162_p2 );
    sensitive << ( tmp_1_reg_206 );
    sensitive << ( tmp_fu_154_p3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_tmp_1_fu_162_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_fu_154_p3 );
    sensitive << ( i_reg_121 );

    SC_METHOD(thread_tmp_3_fu_168_p1);
    sensitive << ( grp_fu_143_p2 );

    SC_METHOD(thread_tmp_4_fu_173_p1);
    sensitive << ( i_cast_reg_197 );

    SC_METHOD(thread_tmp_5_fu_177_p1);
    sensitive << ( i_cast_reg_197 );

    SC_METHOD(thread_tmp_6_fu_181_p2);
    sensitive << ( c_load_reg_230 );
    sensitive << ( data1_reg_133 );

    SC_METHOD(thread_tmp_fu_154_p3);
    sensitive << ( i_reg_121 );

    SC_METHOD(thread_x_0_ack_out);
    sensitive << ( y_1_ack_in );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_y_1_ack_in);
    sensitive << ( y_1_vld_reg );

    SC_METHOD(thread_y_1_vld_in);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_fu_154_p3 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( y_1_ack_in );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_fu_154_p3 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "00000001";
    y_1_data_reg = "00000000000000000000000000000000";
    y_1_vld_reg = SC_LOGIC_0;
    x_0_data_reg = "00000000000000000000000000000000";
    x_0_vld_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "fir_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWVALID, "(port)s_axi_AXILiteS_AWVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWREADY, "(port)s_axi_AXILiteS_AWREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWADDR, "(port)s_axi_AXILiteS_AWADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_WVALID, "(port)s_axi_AXILiteS_WVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_WREADY, "(port)s_axi_AXILiteS_WREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_WDATA, "(port)s_axi_AXILiteS_WDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_WSTRB, "(port)s_axi_AXILiteS_WSTRB");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARVALID, "(port)s_axi_AXILiteS_ARVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARREADY, "(port)s_axi_AXILiteS_ARREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARADDR, "(port)s_axi_AXILiteS_ARADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_RVALID, "(port)s_axi_AXILiteS_RVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_RREADY, "(port)s_axi_AXILiteS_RREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_RDATA, "(port)s_axi_AXILiteS_RDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_RRESP, "(port)s_axi_AXILiteS_RRESP");
    sc_trace(mVcdFile, s_axi_AXILiteS_BVALID, "(port)s_axi_AXILiteS_BVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_BREADY, "(port)s_axi_AXILiteS_BREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_BRESP, "(port)s_axi_AXILiteS_BRESP");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, y_1_data_reg, "y_1_data_reg");
    sc_trace(mVcdFile, y_1_vld_reg, "y_1_vld_reg");
    sc_trace(mVcdFile, y_1_vld_in, "y_1_vld_in");
    sc_trace(mVcdFile, y_1_ack_in, "y_1_ack_in");
    sc_trace(mVcdFile, c_address0, "c_address0");
    sc_trace(mVcdFile, c_ce0, "c_ce0");
    sc_trace(mVcdFile, c_q0, "c_q0");
    sc_trace(mVcdFile, x, "x");
    sc_trace(mVcdFile, x_0_data_reg, "x_0_data_reg");
    sc_trace(mVcdFile, x_0_vld_reg, "x_0_vld_reg");
    sc_trace(mVcdFile, x_0_ack_out, "x_0_ack_out");
    sc_trace(mVcdFile, shift_reg_address0, "shift_reg_address0");
    sc_trace(mVcdFile, shift_reg_ce0, "shift_reg_ce0");
    sc_trace(mVcdFile, shift_reg_we0, "shift_reg_we0");
    sc_trace(mVcdFile, shift_reg_d0, "shift_reg_d0");
    sc_trace(mVcdFile, shift_reg_q0, "shift_reg_q0");
    sc_trace(mVcdFile, x_read_reg_191, "x_read_reg_191");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, i_cast_fu_150_p1, "i_cast_fu_150_p1");
    sc_trace(mVcdFile, i_cast_reg_197, "i_cast_reg_197");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_1_fu_162_p2, "tmp_1_fu_162_p2");
    sc_trace(mVcdFile, tmp_1_reg_206, "tmp_1_reg_206");
    sc_trace(mVcdFile, tmp_fu_154_p3, "tmp_fu_154_p3");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, grp_fu_143_p2, "grp_fu_143_p2");
    sc_trace(mVcdFile, i_1_reg_225, "i_1_reg_225");
    sc_trace(mVcdFile, c_load_reg_230, "c_load_reg_230");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, tmp_6_fu_181_p2, "tmp_6_fu_181_p2");
    sc_trace(mVcdFile, tmp_6_reg_235, "tmp_6_reg_235");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, acc_1_fu_186_p2, "acc_1_fu_186_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, acc_reg_107, "acc_reg_107");
    sc_trace(mVcdFile, ap_phi_mux_i_phi_fu_125_p4, "ap_phi_mux_i_phi_fu_125_p4");
    sc_trace(mVcdFile, i_reg_121, "i_reg_121");
    sc_trace(mVcdFile, data1_reg_133, "data1_reg_133");
    sc_trace(mVcdFile, tmp_3_fu_168_p1, "tmp_3_fu_168_p1");
    sc_trace(mVcdFile, tmp_4_fu_173_p1, "tmp_4_fu_173_p1");
    sc_trace(mVcdFile, tmp_5_fu_177_p1, "tmp_5_fu_177_p1");
    sc_trace(mVcdFile, grp_fu_143_p0, "grp_fu_143_p0");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("fir.hdltvin.dat");
    mHdltvoutHandle.open("fir.hdltvout.dat");
}

fir::~fir() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete shift_reg_U;
    delete fir_AXILiteS_s_axi_U;
}

void fir::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void fir::thread_ap_clk_no_reset_() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        acc_reg_107 = acc_1_fu_186_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        acc_reg_107 = ap_const_lv32_0;
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(tmp_1_reg_206.read(), ap_const_lv1_0))) {
        data1_reg_133 = shift_reg_q0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(tmp_fu_154_p3.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(tmp_1_fu_162_p2.read(), ap_const_lv1_1))) {
        data1_reg_133 = x_read_reg_191.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        i_reg_121 = i_1_reg_225.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_reg_121 = ap_const_lv5_A;
    }
    if ((!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) && 
         esl_seteq<1,1,1>(ap_const_logic_1, y_1_vld_in.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, y_1_vld_reg.read()))) {
        y_1_vld_reg = ap_const_logic_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_0, y_1_vld_in.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, y_1_vld_reg.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1))) {
        y_1_vld_reg = ap_const_logic_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        c_load_reg_230 = c_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        i_1_reg_225 = grp_fu_143_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        i_cast_reg_197 = i_cast_fu_150_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(tmp_fu_154_p3.read(), ap_const_lv1_0))) {
        tmp_1_reg_206 = tmp_1_fu_162_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        tmp_6_reg_235 = tmp_6_fu_181_p2.read();
    }
    if (((!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, x_0_vld_reg.read())) || (!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, x_0_vld_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, x_0_ack_out.read())))) {
        x_0_data_reg = x.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        x_read_reg_191 = x_0_data_reg.read();
    }
    if (((!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, y_1_vld_in.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, y_1_vld_reg.read())) || (!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, y_1_vld_in.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, y_1_vld_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1)))) {
        y_1_data_reg = acc_reg_107.read();
    }
}

void fir::thread_acc_1_fu_186_p2() {
    acc_1_fu_186_p2 = (!tmp_6_reg_235.read().is_01() || !acc_reg_107.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp_6_reg_235.read()) + sc_biguint<32>(acc_reg_107.read()));
}

void fir::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void fir::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void fir::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void fir::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void fir::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void fir::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void fir::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void fir::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void fir::thread_ap_done() {
    if ((esl_seteq<1,1,1>(y_1_ack_in.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void fir::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void fir::thread_ap_phi_mux_i_phi_fu_125_p4() {
    ap_phi_mux_i_phi_fu_125_p4 = i_reg_121.read();
}

void fir::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(y_1_ack_in.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void fir::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void fir::thread_c_address0() {
    c_address0 =  (sc_lv<4>) (tmp_5_fu_177_p1.read());
}

void fir::thread_c_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        c_ce0 = ap_const_logic_1;
    } else {
        c_ce0 = ap_const_logic_0;
    }
}

void fir::thread_grp_fu_143_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        grp_fu_143_p0 = i_reg_121.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        grp_fu_143_p0 = ap_phi_mux_i_phi_fu_125_p4.read();
    } else {
        grp_fu_143_p0 = "XXXXX";
    }
}

void fir::thread_grp_fu_143_p2() {
    grp_fu_143_p2 = (!grp_fu_143_p0.read().is_01() || !ap_const_lv5_1F.is_01())? sc_lv<5>(): (sc_bigint<5>(grp_fu_143_p0.read()) + sc_bigint<5>(ap_const_lv5_1F));
}

void fir::thread_i_cast_fu_150_p1() {
    i_cast_fu_150_p1 = esl_sext<32,5>(i_reg_121.read());
}

void fir::thread_shift_reg_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        shift_reg_address0 =  (sc_lv<4>) (tmp_4_fu_173_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(tmp_fu_154_p3.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(tmp_1_fu_162_p2.read(), ap_const_lv1_1))) {
        shift_reg_address0 = ap_const_lv4_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(tmp_fu_154_p3.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(tmp_1_fu_162_p2.read(), ap_const_lv1_0))) {
        shift_reg_address0 =  (sc_lv<4>) (tmp_3_fu_168_p1.read());
    } else {
        shift_reg_address0 =  (sc_lv<4>) ("XXXX");
    }
}

void fir::thread_shift_reg_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(tmp_fu_154_p3.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(tmp_1_fu_162_p2.read(), ap_const_lv1_0)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(tmp_fu_154_p3.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(tmp_1_fu_162_p2.read(), ap_const_lv1_1)))) {
        shift_reg_ce0 = ap_const_logic_1;
    } else {
        shift_reg_ce0 = ap_const_logic_0;
    }
}

void fir::thread_shift_reg_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        shift_reg_d0 = shift_reg_q0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(tmp_fu_154_p3.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(tmp_1_fu_162_p2.read(), ap_const_lv1_1))) {
        shift_reg_d0 = x_read_reg_191.read();
    } else {
        shift_reg_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void fir::thread_shift_reg_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(tmp_1_reg_206.read(), ap_const_lv1_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(tmp_fu_154_p3.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(tmp_1_fu_162_p2.read(), ap_const_lv1_1)))) {
        shift_reg_we0 = ap_const_logic_1;
    } else {
        shift_reg_we0 = ap_const_logic_0;
    }
}

void fir::thread_tmp_1_fu_162_p2() {
    tmp_1_fu_162_p2 = (!i_reg_121.read().is_01() || !ap_const_lv5_0.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_121.read() == ap_const_lv5_0);
}

void fir::thread_tmp_3_fu_168_p1() {
    tmp_3_fu_168_p1 = esl_zext<64,5>(grp_fu_143_p2.read());
}

void fir::thread_tmp_4_fu_173_p1() {
    tmp_4_fu_173_p1 = esl_zext<64,32>(i_cast_reg_197.read());
}

void fir::thread_tmp_5_fu_177_p1() {
    tmp_5_fu_177_p1 = esl_zext<64,32>(i_cast_reg_197.read());
}

void fir::thread_tmp_6_fu_181_p2() {
    tmp_6_fu_181_p2 = (!c_load_reg_230.read().is_01() || !data1_reg_133.read().is_01())? sc_lv<32>(): sc_bigint<32>(c_load_reg_230.read()) * sc_bigint<32>(data1_reg_133.read());
}

void fir::thread_tmp_fu_154_p3() {
    tmp_fu_154_p3 = i_reg_121.read().range(4, 4);
}

void fir::thread_x_0_ack_out() {
    if ((esl_seteq<1,1,1>(y_1_ack_in.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        x_0_ack_out = ap_const_logic_1;
    } else {
        x_0_ack_out = ap_const_logic_0;
    }
}

void fir::thread_y_1_ack_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, y_1_vld_reg.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, y_1_vld_reg.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1)))) {
        y_1_ack_in = ap_const_logic_1;
    } else {
        y_1_ack_in = ap_const_logic_0;
    }
}

void fir::thread_y_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(tmp_fu_154_p3.read(), ap_const_lv1_1))) {
        y_1_vld_in = ap_const_logic_1;
    } else {
        y_1_vld_in = ap_const_logic_0;
    }
}

void fir::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(tmp_fu_154_p3.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state8;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 128 : 
            if ((esl_seteq<1,1,1>(y_1_ack_in.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state8;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<8>) ("XXXXXXXX");
            break;
    }
}

void fir::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWVALID\" :  \"" << s_axi_AXILiteS_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_AWREADY\" :  \"" << s_axi_AXILiteS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWADDR\" :  \"" << s_axi_AXILiteS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WVALID\" :  \"" << s_axi_AXILiteS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_WREADY\" :  \"" << s_axi_AXILiteS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WDATA\" :  \"" << s_axi_AXILiteS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WSTRB\" :  \"" << s_axi_AXILiteS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARVALID\" :  \"" << s_axi_AXILiteS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_ARREADY\" :  \"" << s_axi_AXILiteS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARADDR\" :  \"" << s_axi_AXILiteS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RVALID\" :  \"" << s_axi_AXILiteS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_RREADY\" :  \"" << s_axi_AXILiteS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RDATA\" :  \"" << s_axi_AXILiteS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RRESP\" :  \"" << s_axi_AXILiteS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BVALID\" :  \"" << s_axi_AXILiteS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_BREADY\" :  \"" << s_axi_AXILiteS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BRESP\" :  \"" << s_axi_AXILiteS_BRESP.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

