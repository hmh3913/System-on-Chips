// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fir,hls_ip_2018_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=58,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=3,HLS_SYN_FF=526,HLS_SYN_LUT=451,HLS_VERSION=2018_2}" *)

module fir (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 8;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] y_1_data_reg;
reg    y_1_vld_reg;
reg    y_1_vld_in;
reg    y_1_ack_in;
wire   [3:0] c_address0;
reg    c_ce0;
wire   [31:0] c_q0;
wire   [31:0] x;
reg   [31:0] x_0_data_reg;
reg    x_0_vld_reg;
reg    x_0_ack_out;
reg   [3:0] shift_reg_address0;
reg    shift_reg_ce0;
reg    shift_reg_we0;
reg   [31:0] shift_reg_d0;
wire   [31:0] shift_reg_q0;
reg   [31:0] x_read_reg_191;
wire    ap_CS_fsm_state2;
wire  signed [31:0] i_cast_fu_150_p1;
reg  signed [31:0] i_cast_reg_197;
wire    ap_CS_fsm_state3;
wire   [0:0] tmp_1_fu_162_p2;
reg   [0:0] tmp_1_reg_206;
wire   [0:0] tmp_fu_154_p3;
wire    ap_CS_fsm_state4;
wire   [4:0] grp_fu_143_p2;
reg   [4:0] i_1_reg_225;
reg  signed [31:0] c_load_reg_230;
wire    ap_CS_fsm_state5;
wire   [31:0] tmp_6_fu_181_p2;
reg   [31:0] tmp_6_reg_235;
wire    ap_CS_fsm_state6;
wire   [31:0] acc_1_fu_186_p2;
wire    ap_CS_fsm_state7;
reg   [31:0] acc_reg_107;
wire  signed [4:0] ap_phi_mux_i_phi_fu_125_p4;
reg  signed [4:0] i_reg_121;
reg  signed [31:0] data1_reg_133;
wire   [63:0] tmp_3_fu_168_p1;
wire   [63:0] tmp_4_fu_173_p1;
wire   [63:0] tmp_5_fu_177_p1;
reg  signed [4:0] grp_fu_143_p0;
wire    ap_CS_fsm_state8;
reg   [7:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
#0 y_1_data_reg = 32'd0;
#0 y_1_vld_reg = 1'b0;
#0 x_0_data_reg = 32'd0;
#0 x_0_vld_reg = 1'b0;
end

fir_shift_reg #(
    .DataWidth( 32 ),
    .AddressRange( 11 ),
    .AddressWidth( 4 ))
shift_reg_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(shift_reg_address0),
    .ce0(shift_reg_ce0),
    .we0(shift_reg_we0),
    .d0(shift_reg_d0),
    .q0(shift_reg_q0)
);

fir_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
fir_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .y(y_1_data_reg),
    .y_ap_vld(y_1_vld_reg),
    .c_address0(c_address0),
    .c_ce0(c_ce0),
    .c_q0(c_q0),
    .x(x)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        acc_reg_107 <= acc_1_fu_186_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        acc_reg_107 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (tmp_1_reg_206 == 1'd0))) begin
        data1_reg_133 <= shift_reg_q0;
    end else if (((1'b1 == ap_CS_fsm_state3) & (tmp_fu_154_p3 == 1'd0) & (tmp_1_fu_162_p2 == 1'd1))) begin
        data1_reg_133 <= x_read_reg_191;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_reg_121 <= i_1_reg_225;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_121 <= 5'd10;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (y_1_vld_reg == 1'b0) & (y_1_vld_in == 1'b1))) begin
        y_1_vld_reg <= 1'b1;
    end else if (((y_1_vld_in == 1'b0) & (1'b1 == 1'b1) & (y_1_vld_reg == 1'b1))) begin
        y_1_vld_reg <= 1'b0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        c_load_reg_230 <= c_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_1_reg_225 <= grp_fu_143_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_cast_reg_197 <= i_cast_fu_150_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_fu_154_p3 == 1'd0))) begin
        tmp_1_reg_206 <= tmp_1_fu_162_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_6_reg_235 <= tmp_6_fu_181_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (x_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (x_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (x_0_vld_reg == 1'b1)))) begin
        x_0_data_reg <= x;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        x_read_reg_191 <= x_0_data_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (y_1_vld_reg == 1'b0) & (y_1_vld_in == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == 1'b1) & (y_1_vld_in == 1'b1) & (y_1_vld_reg == 1'b1)))) begin
        y_1_data_reg <= acc_reg_107;
    end
end

always @ (*) begin
    if (((y_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((y_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        c_ce0 = 1'b1;
    end else begin
        c_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_143_p0 = i_reg_121;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_143_p0 = ap_phi_mux_i_phi_fu_125_p4;
    end else begin
        grp_fu_143_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        shift_reg_address0 = tmp_4_fu_173_p1;
    end else if (((1'b1 == ap_CS_fsm_state3) & (tmp_fu_154_p3 == 1'd0) & (tmp_1_fu_162_p2 == 1'd1))) begin
        shift_reg_address0 = 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state3) & (tmp_fu_154_p3 == 1'd0) & (tmp_1_fu_162_p2 == 1'd0))) begin
        shift_reg_address0 = tmp_3_fu_168_p1;
    end else begin
        shift_reg_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state3) & (tmp_fu_154_p3 == 1'd0) & (tmp_1_fu_162_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state3) & (tmp_fu_154_p3 == 1'd0) & (tmp_1_fu_162_p2 == 1'd0)))) begin
        shift_reg_ce0 = 1'b1;
    end else begin
        shift_reg_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        shift_reg_d0 = shift_reg_q0;
    end else if (((1'b1 == ap_CS_fsm_state3) & (tmp_fu_154_p3 == 1'd0) & (tmp_1_fu_162_p2 == 1'd1))) begin
        shift_reg_d0 = x_read_reg_191;
    end else begin
        shift_reg_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (tmp_1_reg_206 == 1'd0)) | ((1'b1 == ap_CS_fsm_state3) & (tmp_fu_154_p3 == 1'd0) & (tmp_1_fu_162_p2 == 1'd1)))) begin
        shift_reg_we0 = 1'b1;
    end else begin
        shift_reg_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((y_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
        x_0_ack_out = 1'b1;
    end else begin
        x_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((y_1_vld_reg == 1'b0) | ((1'b1 == 1'b1) & (y_1_vld_reg == 1'b1)))) begin
        y_1_ack_in = 1'b1;
    end else begin
        y_1_ack_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_fu_154_p3 == 1'd1))) begin
        y_1_vld_in = 1'b1;
    end else begin
        y_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (tmp_fu_154_p3 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state8 : begin
            if (((y_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_1_fu_186_p2 = (tmp_6_reg_235 + acc_reg_107);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_phi_mux_i_phi_fu_125_p4 = i_reg_121;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign c_address0 = tmp_5_fu_177_p1;

assign grp_fu_143_p2 = ($signed(grp_fu_143_p0) + $signed(5'd31));

assign i_cast_fu_150_p1 = i_reg_121;

assign tmp_1_fu_162_p2 = ((i_reg_121 == 5'd0) ? 1'b1 : 1'b0);

assign tmp_3_fu_168_p1 = grp_fu_143_p2;

assign tmp_4_fu_173_p1 = $unsigned(i_cast_reg_197);

assign tmp_5_fu_177_p1 = $unsigned(i_cast_reg_197);

assign tmp_6_fu_181_p2 = ($signed(c_load_reg_230) * $signed(data1_reg_133));

assign tmp_fu_154_p3 = i_reg_121[32'd4];

endmodule //fir
