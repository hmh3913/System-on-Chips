// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _matrixmul_HH_
#define _matrixmul_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "matrixmul_mac_mulbkb.h"

namespace ap_rtl {

struct matrixmul : public sc_module {
    // Port declarations 20
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > lm;
    sc_in< sc_lv<32> > ln;
    sc_in< sc_lv<32> > lp;
    sc_out< sc_lv<10> > A_address0;
    sc_out< sc_logic > A_ce0;
    sc_in< sc_lv<8> > A_q0;
    sc_out< sc_lv<10> > B_address0;
    sc_out< sc_logic > B_ce0;
    sc_in< sc_lv<8> > B_q0;
    sc_out< sc_lv<10> > AB_address0;
    sc_out< sc_logic > AB_ce0;
    sc_out< sc_logic > AB_we0;
    sc_out< sc_lv<32> > AB_d0;
    sc_in< sc_lv<32> > AB_q0;


    // Module declarations
    matrixmul(sc_module_name name);
    SC_HAS_PROCESS(matrixmul);

    ~matrixmul();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    matrixmul_mac_mulbkb<1,1,8,8,32,32>* matrixmul_mac_mulbkb_U1;
    sc_signal< sc_lv<8> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<32> > m_fu_150_p2;
    sc_signal< sc_lv<32> > m_reg_325;
    sc_signal< sc_lv<32> > n_fu_156_p2;
    sc_signal< sc_lv<32> > n_reg_330;
    sc_signal< sc_lv<32> > p_fu_162_p2;
    sc_signal< sc_lv<32> > p_reg_336;
    sc_signal< sc_lv<32> > i_1_fu_173_p2;
    sc_signal< sc_lv<32> > i_1_reg_345;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<12> > tmp_1_cast_fu_183_p3;
    sc_signal< sc_lv<12> > tmp_1_cast_reg_350;
    sc_signal< sc_lv<1> > exitcond4_fu_168_p2;
    sc_signal< sc_lv<32> > j_fu_196_p2;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<32> > i_2_fu_221_p2;
    sc_signal< sc_lv<32> > i_2_reg_366;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<12> > tmp_7_cast_fu_231_p3;
    sc_signal< sc_lv<12> > tmp_7_cast_reg_371;
    sc_signal< sc_lv<1> > exitcond2_fu_216_p2;
    sc_signal< sc_lv<32> > j_1_fu_244_p2;
    sc_signal< sc_lv<32> > j_1_reg_380;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<12> > tmp_5_fu_250_p1;
    sc_signal< sc_lv<12> > tmp_5_reg_385;
    sc_signal< sc_lv<1> > exitcond1_fu_239_p2;
    sc_signal< sc_lv<10> > AB_addr_1_reg_390;
    sc_signal< sc_lv<32> > k_1_fu_269_p2;
    sc_signal< sc_lv<32> > k_1_reg_398;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<1> > exitcond_fu_264_p2;
    sc_signal< sc_lv<8> > A_load_reg_413;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<8> > B_load_reg_418;
    sc_signal< sc_lv<32> > AB_load_reg_423;
    sc_signal< sc_lv<32> > i1_reg_95;
    sc_signal< sc_lv<1> > exitcond3_fu_191_p2;
    sc_signal< sc_lv<32> > j2_reg_106;
    sc_signal< sc_lv<32> > i_reg_117;
    sc_signal< sc_lv<32> > j1_reg_128;
    sc_signal< sc_lv<32> > k_reg_139;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_lv<64> > tmp_9_cast1_fu_211_p1;
    sc_signal< sc_lv<64> > tmp_10_cast_fu_259_p1;
    sc_signal< sc_lv<64> > tmp_11_cast_fu_284_p1;
    sc_signal< sc_lv<64> > tmp_14_cast_fu_306_p1;
    sc_signal< sc_lv<32> > grp_fu_317_p3;
    sc_signal< sc_lv<7> > tmp_fu_179_p1;
    sc_signal< sc_lv<12> > tmp_3_fu_202_p1;
    sc_signal< sc_lv<12> > tmp_9_fu_206_p2;
    sc_signal< sc_lv<7> > tmp_1_fu_227_p1;
    sc_signal< sc_lv<12> > tmp_s_fu_254_p2;
    sc_signal< sc_lv<12> > tmp_6_fu_275_p1;
    sc_signal< sc_lv<12> > tmp_7_fu_279_p2;
    sc_signal< sc_lv<7> > tmp_8_fu_289_p1;
    sc_signal< sc_lv<12> > tmp_13_cast_fu_293_p3;
    sc_signal< sc_lv<12> > tmp_10_fu_301_p2;
    sc_signal< sc_lv<8> > grp_fu_317_p0;
    sc_signal< sc_lv<8> > grp_fu_317_p1;
    sc_signal< sc_lv<8> > ap_NS_fsm;
    sc_signal< sc_lv<16> > grp_fu_317_p00;
    sc_signal< sc_lv<16> > grp_fu_317_p10;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<8> ap_ST_fsm_state1;
    static const sc_lv<8> ap_ST_fsm_state2;
    static const sc_lv<8> ap_ST_fsm_state3;
    static const sc_lv<8> ap_ST_fsm_state4;
    static const sc_lv<8> ap_ST_fsm_state5;
    static const sc_lv<8> ap_ST_fsm_state6;
    static const sc_lv<8> ap_ST_fsm_state7;
    static const sc_lv<8> ap_ST_fsm_state8;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<5> ap_const_lv5_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_AB_address0();
    void thread_AB_ce0();
    void thread_AB_d0();
    void thread_AB_we0();
    void thread_A_address0();
    void thread_A_ce0();
    void thread_B_address0();
    void thread_B_ce0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_CS_fsm_state8();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_exitcond1_fu_239_p2();
    void thread_exitcond2_fu_216_p2();
    void thread_exitcond3_fu_191_p2();
    void thread_exitcond4_fu_168_p2();
    void thread_exitcond_fu_264_p2();
    void thread_grp_fu_317_p0();
    void thread_grp_fu_317_p00();
    void thread_grp_fu_317_p1();
    void thread_grp_fu_317_p10();
    void thread_i_1_fu_173_p2();
    void thread_i_2_fu_221_p2();
    void thread_j_1_fu_244_p2();
    void thread_j_fu_196_p2();
    void thread_k_1_fu_269_p2();
    void thread_m_fu_150_p2();
    void thread_n_fu_156_p2();
    void thread_p_fu_162_p2();
    void thread_tmp_10_cast_fu_259_p1();
    void thread_tmp_10_fu_301_p2();
    void thread_tmp_11_cast_fu_284_p1();
    void thread_tmp_13_cast_fu_293_p3();
    void thread_tmp_14_cast_fu_306_p1();
    void thread_tmp_1_cast_fu_183_p3();
    void thread_tmp_1_fu_227_p1();
    void thread_tmp_3_fu_202_p1();
    void thread_tmp_5_fu_250_p1();
    void thread_tmp_6_fu_275_p1();
    void thread_tmp_7_cast_fu_231_p3();
    void thread_tmp_7_fu_279_p2();
    void thread_tmp_8_fu_289_p1();
    void thread_tmp_9_cast1_fu_211_p1();
    void thread_tmp_9_fu_206_p2();
    void thread_tmp_fu_179_p1();
    void thread_tmp_s_fu_254_p2();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
