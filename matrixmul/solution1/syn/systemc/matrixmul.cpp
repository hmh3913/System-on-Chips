// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "matrixmul.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic matrixmul::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic matrixmul::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<8> matrixmul::ap_ST_fsm_state1 = "1";
const sc_lv<8> matrixmul::ap_ST_fsm_state2 = "10";
const sc_lv<8> matrixmul::ap_ST_fsm_state3 = "100";
const sc_lv<8> matrixmul::ap_ST_fsm_state4 = "1000";
const sc_lv<8> matrixmul::ap_ST_fsm_state5 = "10000";
const sc_lv<8> matrixmul::ap_ST_fsm_state6 = "100000";
const sc_lv<8> matrixmul::ap_ST_fsm_state7 = "1000000";
const sc_lv<8> matrixmul::ap_ST_fsm_state8 = "10000000";
const sc_lv<32> matrixmul::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> matrixmul::ap_const_lv32_1 = "1";
const sc_lv<1> matrixmul::ap_const_lv1_0 = "0";
const sc_lv<32> matrixmul::ap_const_lv32_2 = "10";
const sc_lv<32> matrixmul::ap_const_lv32_3 = "11";
const sc_lv<32> matrixmul::ap_const_lv32_4 = "100";
const sc_lv<32> matrixmul::ap_const_lv32_5 = "101";
const sc_lv<32> matrixmul::ap_const_lv32_6 = "110";
const sc_lv<1> matrixmul::ap_const_lv1_1 = "1";
const sc_lv<32> matrixmul::ap_const_lv32_7 = "111";
const sc_lv<5> matrixmul::ap_const_lv5_0 = "00000";
const bool matrixmul::ap_const_boolean_1 = true;

matrixmul::matrixmul(sc_module_name name) : sc_module(name), mVcdFile(0) {
    matrixmul_mac_mulbkb_U1 = new matrixmul_mac_mulbkb<1,1,8,8,32,32>("matrixmul_mac_mulbkb_U1");
    matrixmul_mac_mulbkb_U1->din0(grp_fu_317_p0);
    matrixmul_mac_mulbkb_U1->din1(grp_fu_317_p1);
    matrixmul_mac_mulbkb_U1->din2(AB_load_reg_423);
    matrixmul_mac_mulbkb_U1->dout(grp_fu_317_p3);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_AB_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( AB_addr_1_reg_390 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( tmp_9_cast1_fu_211_p1 );

    SC_METHOD(thread_AB_ce0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_AB_d0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( grp_fu_317_p3 );

    SC_METHOD(thread_AB_we0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond3_fu_191_p2 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_A_address0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( tmp_11_cast_fu_284_p1 );

    SC_METHOD(thread_A_ce0);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_B_address0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( tmp_14_cast_fu_306_p1 );

    SC_METHOD(thread_B_ce0);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( exitcond2_fu_216_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( exitcond2_fu_216_p2 );

    SC_METHOD(thread_exitcond1_fu_239_p2);
    sensitive << ( p_reg_336 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( j1_reg_128 );

    SC_METHOD(thread_exitcond2_fu_216_p2);
    sensitive << ( n_reg_330 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( i_reg_117 );

    SC_METHOD(thread_exitcond3_fu_191_p2);
    sensitive << ( p_reg_336 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( j2_reg_106 );

    SC_METHOD(thread_exitcond4_fu_168_p2);
    sensitive << ( n_reg_330 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i1_reg_95 );

    SC_METHOD(thread_exitcond_fu_264_p2);
    sensitive << ( m_reg_325 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( k_reg_139 );

    SC_METHOD(thread_grp_fu_317_p0);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( grp_fu_317_p00 );

    SC_METHOD(thread_grp_fu_317_p00);
    sensitive << ( A_load_reg_413 );

    SC_METHOD(thread_grp_fu_317_p1);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( grp_fu_317_p10 );

    SC_METHOD(thread_grp_fu_317_p10);
    sensitive << ( B_load_reg_418 );

    SC_METHOD(thread_i_1_fu_173_p2);
    sensitive << ( i1_reg_95 );

    SC_METHOD(thread_i_2_fu_221_p2);
    sensitive << ( i_reg_117 );

    SC_METHOD(thread_j_1_fu_244_p2);
    sensitive << ( j1_reg_128 );

    SC_METHOD(thread_j_fu_196_p2);
    sensitive << ( j2_reg_106 );

    SC_METHOD(thread_k_1_fu_269_p2);
    sensitive << ( k_reg_139 );

    SC_METHOD(thread_m_fu_150_p2);
    sensitive << ( lm );

    SC_METHOD(thread_n_fu_156_p2);
    sensitive << ( ln );

    SC_METHOD(thread_p_fu_162_p2);
    sensitive << ( lp );

    SC_METHOD(thread_tmp_10_cast_fu_259_p1);
    sensitive << ( tmp_s_fu_254_p2 );

    SC_METHOD(thread_tmp_10_fu_301_p2);
    sensitive << ( tmp_5_reg_385 );
    sensitive << ( tmp_13_cast_fu_293_p3 );

    SC_METHOD(thread_tmp_11_cast_fu_284_p1);
    sensitive << ( tmp_7_fu_279_p2 );

    SC_METHOD(thread_tmp_13_cast_fu_293_p3);
    sensitive << ( tmp_8_fu_289_p1 );

    SC_METHOD(thread_tmp_14_cast_fu_306_p1);
    sensitive << ( tmp_10_fu_301_p2 );

    SC_METHOD(thread_tmp_1_cast_fu_183_p3);
    sensitive << ( tmp_fu_179_p1 );

    SC_METHOD(thread_tmp_1_fu_227_p1);
    sensitive << ( i_reg_117 );

    SC_METHOD(thread_tmp_3_fu_202_p1);
    sensitive << ( j2_reg_106 );

    SC_METHOD(thread_tmp_5_fu_250_p1);
    sensitive << ( j1_reg_128 );

    SC_METHOD(thread_tmp_6_fu_275_p1);
    sensitive << ( k_reg_139 );

    SC_METHOD(thread_tmp_7_cast_fu_231_p3);
    sensitive << ( tmp_1_fu_227_p1 );

    SC_METHOD(thread_tmp_7_fu_279_p2);
    sensitive << ( tmp_7_cast_reg_371 );
    sensitive << ( tmp_6_fu_275_p1 );

    SC_METHOD(thread_tmp_8_fu_289_p1);
    sensitive << ( k_reg_139 );

    SC_METHOD(thread_tmp_9_cast1_fu_211_p1);
    sensitive << ( tmp_9_fu_206_p2 );

    SC_METHOD(thread_tmp_9_fu_206_p2);
    sensitive << ( tmp_1_cast_reg_350 );
    sensitive << ( tmp_3_fu_202_p1 );

    SC_METHOD(thread_tmp_fu_179_p1);
    sensitive << ( i1_reg_95 );

    SC_METHOD(thread_tmp_s_fu_254_p2);
    sensitive << ( tmp_7_cast_reg_371 );
    sensitive << ( tmp_5_fu_250_p1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond4_fu_168_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( exitcond2_fu_216_p2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( exitcond1_fu_239_p2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( exitcond_fu_264_p2 );
    sensitive << ( exitcond3_fu_191_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "00000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "matrixmul_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, lm, "(port)lm");
    sc_trace(mVcdFile, ln, "(port)ln");
    sc_trace(mVcdFile, lp, "(port)lp");
    sc_trace(mVcdFile, A_address0, "(port)A_address0");
    sc_trace(mVcdFile, A_ce0, "(port)A_ce0");
    sc_trace(mVcdFile, A_q0, "(port)A_q0");
    sc_trace(mVcdFile, B_address0, "(port)B_address0");
    sc_trace(mVcdFile, B_ce0, "(port)B_ce0");
    sc_trace(mVcdFile, B_q0, "(port)B_q0");
    sc_trace(mVcdFile, AB_address0, "(port)AB_address0");
    sc_trace(mVcdFile, AB_ce0, "(port)AB_ce0");
    sc_trace(mVcdFile, AB_we0, "(port)AB_we0");
    sc_trace(mVcdFile, AB_d0, "(port)AB_d0");
    sc_trace(mVcdFile, AB_q0, "(port)AB_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, m_fu_150_p2, "m_fu_150_p2");
    sc_trace(mVcdFile, m_reg_325, "m_reg_325");
    sc_trace(mVcdFile, n_fu_156_p2, "n_fu_156_p2");
    sc_trace(mVcdFile, n_reg_330, "n_reg_330");
    sc_trace(mVcdFile, p_fu_162_p2, "p_fu_162_p2");
    sc_trace(mVcdFile, p_reg_336, "p_reg_336");
    sc_trace(mVcdFile, i_1_fu_173_p2, "i_1_fu_173_p2");
    sc_trace(mVcdFile, i_1_reg_345, "i_1_reg_345");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_1_cast_fu_183_p3, "tmp_1_cast_fu_183_p3");
    sc_trace(mVcdFile, tmp_1_cast_reg_350, "tmp_1_cast_reg_350");
    sc_trace(mVcdFile, exitcond4_fu_168_p2, "exitcond4_fu_168_p2");
    sc_trace(mVcdFile, j_fu_196_p2, "j_fu_196_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, i_2_fu_221_p2, "i_2_fu_221_p2");
    sc_trace(mVcdFile, i_2_reg_366, "i_2_reg_366");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, tmp_7_cast_fu_231_p3, "tmp_7_cast_fu_231_p3");
    sc_trace(mVcdFile, tmp_7_cast_reg_371, "tmp_7_cast_reg_371");
    sc_trace(mVcdFile, exitcond2_fu_216_p2, "exitcond2_fu_216_p2");
    sc_trace(mVcdFile, j_1_fu_244_p2, "j_1_fu_244_p2");
    sc_trace(mVcdFile, j_1_reg_380, "j_1_reg_380");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, tmp_5_fu_250_p1, "tmp_5_fu_250_p1");
    sc_trace(mVcdFile, tmp_5_reg_385, "tmp_5_reg_385");
    sc_trace(mVcdFile, exitcond1_fu_239_p2, "exitcond1_fu_239_p2");
    sc_trace(mVcdFile, AB_addr_1_reg_390, "AB_addr_1_reg_390");
    sc_trace(mVcdFile, k_1_fu_269_p2, "k_1_fu_269_p2");
    sc_trace(mVcdFile, k_1_reg_398, "k_1_reg_398");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, exitcond_fu_264_p2, "exitcond_fu_264_p2");
    sc_trace(mVcdFile, A_load_reg_413, "A_load_reg_413");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, B_load_reg_418, "B_load_reg_418");
    sc_trace(mVcdFile, AB_load_reg_423, "AB_load_reg_423");
    sc_trace(mVcdFile, i1_reg_95, "i1_reg_95");
    sc_trace(mVcdFile, exitcond3_fu_191_p2, "exitcond3_fu_191_p2");
    sc_trace(mVcdFile, j2_reg_106, "j2_reg_106");
    sc_trace(mVcdFile, i_reg_117, "i_reg_117");
    sc_trace(mVcdFile, j1_reg_128, "j1_reg_128");
    sc_trace(mVcdFile, k_reg_139, "k_reg_139");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, tmp_9_cast1_fu_211_p1, "tmp_9_cast1_fu_211_p1");
    sc_trace(mVcdFile, tmp_10_cast_fu_259_p1, "tmp_10_cast_fu_259_p1");
    sc_trace(mVcdFile, tmp_11_cast_fu_284_p1, "tmp_11_cast_fu_284_p1");
    sc_trace(mVcdFile, tmp_14_cast_fu_306_p1, "tmp_14_cast_fu_306_p1");
    sc_trace(mVcdFile, grp_fu_317_p3, "grp_fu_317_p3");
    sc_trace(mVcdFile, tmp_fu_179_p1, "tmp_fu_179_p1");
    sc_trace(mVcdFile, tmp_3_fu_202_p1, "tmp_3_fu_202_p1");
    sc_trace(mVcdFile, tmp_9_fu_206_p2, "tmp_9_fu_206_p2");
    sc_trace(mVcdFile, tmp_1_fu_227_p1, "tmp_1_fu_227_p1");
    sc_trace(mVcdFile, tmp_s_fu_254_p2, "tmp_s_fu_254_p2");
    sc_trace(mVcdFile, tmp_6_fu_275_p1, "tmp_6_fu_275_p1");
    sc_trace(mVcdFile, tmp_7_fu_279_p2, "tmp_7_fu_279_p2");
    sc_trace(mVcdFile, tmp_8_fu_289_p1, "tmp_8_fu_289_p1");
    sc_trace(mVcdFile, tmp_13_cast_fu_293_p3, "tmp_13_cast_fu_293_p3");
    sc_trace(mVcdFile, tmp_10_fu_301_p2, "tmp_10_fu_301_p2");
    sc_trace(mVcdFile, grp_fu_317_p0, "grp_fu_317_p0");
    sc_trace(mVcdFile, grp_fu_317_p1, "grp_fu_317_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, grp_fu_317_p00, "grp_fu_317_p00");
    sc_trace(mVcdFile, grp_fu_317_p10, "grp_fu_317_p10");
#endif

    }
    mHdltvinHandle.open("matrixmul.hdltvin.dat");
    mHdltvoutHandle.open("matrixmul.hdltvout.dat");
}

matrixmul::~matrixmul() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete matrixmul_mac_mulbkb_U1;
}

void matrixmul::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(exitcond3_fu_191_p2.read(), ap_const_lv1_1))) {
        i1_reg_95 = i_1_reg_345.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i1_reg_95 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(exitcond4_fu_168_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        i_reg_117 = ap_const_lv32_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(exitcond1_fu_239_p2.read(), ap_const_lv1_1))) {
        i_reg_117 = i_2_reg_366.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_264_p2.read(), ap_const_lv1_1))) {
        j1_reg_128 = j_1_reg_380.read();
    } else if ((esl_seteq<1,1,1>(exitcond2_fu_216_p2.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        j1_reg_128 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(exitcond4_fu_168_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        j2_reg_106 = ap_const_lv32_0;
    } else if ((esl_seteq<1,1,1>(exitcond3_fu_191_p2.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        j2_reg_106 = j_fu_196_p2.read();
    }
    if ((esl_seteq<1,1,1>(exitcond1_fu_239_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        k_reg_139 = ap_const_lv32_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        k_reg_139 = k_1_reg_398.read();
    }
    if ((esl_seteq<1,1,1>(exitcond1_fu_239_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        AB_addr_1_reg_390 =  (sc_lv<10>) (tmp_10_cast_fu_259_p1.read());
        tmp_5_reg_385 = tmp_5_fu_250_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        AB_load_reg_423 = AB_q0.read();
        A_load_reg_413 = A_q0.read();
        B_load_reg_418 = B_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_1_reg_345 = i_1_fu_173_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        i_2_reg_366 = i_2_fu_221_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        j_1_reg_380 = j_1_fu_244_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        k_1_reg_398 = k_1_fu_269_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        m_reg_325 = m_fu_150_p2.read();
        n_reg_330 = n_fu_156_p2.read();
        p_reg_336 = p_fu_162_p2.read();
    }
    if ((esl_seteq<1,1,1>(exitcond4_fu_168_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        tmp_1_cast_reg_350 = tmp_1_cast_fu_183_p3.read();
    }
    if ((esl_seteq<1,1,1>(exitcond2_fu_216_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        tmp_7_cast_reg_371 = tmp_7_cast_fu_231_p3.read();
    }
}

void matrixmul::thread_AB_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        AB_address0 = AB_addr_1_reg_390.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        AB_address0 =  (sc_lv<10>) (tmp_9_cast1_fu_211_p1.read());
    } else {
        AB_address0 = "XXXXXXXXXX";
    }
}

void matrixmul::thread_AB_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        AB_ce0 = ap_const_logic_1;
    } else {
        AB_ce0 = ap_const_logic_0;
    }
}

void matrixmul::thread_AB_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        AB_d0 = grp_fu_317_p3.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        AB_d0 = ap_const_lv32_0;
    } else {
        AB_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void matrixmul::thread_AB_we0() {
    if (((esl_seteq<1,1,1>(exitcond3_fu_191_p2.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        AB_we0 = ap_const_logic_1;
    } else {
        AB_we0 = ap_const_logic_0;
    }
}

void matrixmul::thread_A_address0() {
    A_address0 =  (sc_lv<10>) (tmp_11_cast_fu_284_p1.read());
}

void matrixmul::thread_A_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        A_ce0 = ap_const_logic_1;
    } else {
        A_ce0 = ap_const_logic_0;
    }
}

void matrixmul::thread_B_address0() {
    B_address0 =  (sc_lv<10>) (tmp_14_cast_fu_306_p1.read());
}

void matrixmul::thread_B_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        B_ce0 = ap_const_logic_1;
    } else {
        B_ce0 = ap_const_logic_0;
    }
}

void matrixmul::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void matrixmul::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void matrixmul::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void matrixmul::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void matrixmul::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void matrixmul::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void matrixmul::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void matrixmul::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void matrixmul::thread_ap_done() {
    if ((esl_seteq<1,1,1>(exitcond2_fu_216_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void matrixmul::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void matrixmul::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(exitcond2_fu_216_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void matrixmul::thread_exitcond1_fu_239_p2() {
    exitcond1_fu_239_p2 = (!j1_reg_128.read().is_01() || !p_reg_336.read().is_01())? sc_lv<1>(): sc_lv<1>(j1_reg_128.read() == p_reg_336.read());
}

void matrixmul::thread_exitcond2_fu_216_p2() {
    exitcond2_fu_216_p2 = (!i_reg_117.read().is_01() || !n_reg_330.read().is_01())? sc_lv<1>(): sc_lv<1>(i_reg_117.read() == n_reg_330.read());
}

void matrixmul::thread_exitcond3_fu_191_p2() {
    exitcond3_fu_191_p2 = (!j2_reg_106.read().is_01() || !p_reg_336.read().is_01())? sc_lv<1>(): sc_lv<1>(j2_reg_106.read() == p_reg_336.read());
}

void matrixmul::thread_exitcond4_fu_168_p2() {
    exitcond4_fu_168_p2 = (!i1_reg_95.read().is_01() || !n_reg_330.read().is_01())? sc_lv<1>(): sc_lv<1>(i1_reg_95.read() == n_reg_330.read());
}

void matrixmul::thread_exitcond_fu_264_p2() {
    exitcond_fu_264_p2 = (!k_reg_139.read().is_01() || !m_reg_325.read().is_01())? sc_lv<1>(): sc_lv<1>(k_reg_139.read() == m_reg_325.read());
}

void matrixmul::thread_grp_fu_317_p0() {
    grp_fu_317_p0 =  (sc_lv<8>) (grp_fu_317_p00.read());
}

void matrixmul::thread_grp_fu_317_p00() {
    grp_fu_317_p00 = esl_zext<16,8>(A_load_reg_413.read());
}

void matrixmul::thread_grp_fu_317_p1() {
    grp_fu_317_p1 =  (sc_lv<8>) (grp_fu_317_p10.read());
}

void matrixmul::thread_grp_fu_317_p10() {
    grp_fu_317_p10 = esl_zext<16,8>(B_load_reg_418.read());
}

void matrixmul::thread_i_1_fu_173_p2() {
    i_1_fu_173_p2 = (!i1_reg_95.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(i1_reg_95.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void matrixmul::thread_i_2_fu_221_p2() {
    i_2_fu_221_p2 = (!i_reg_117.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(i_reg_117.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void matrixmul::thread_j_1_fu_244_p2() {
    j_1_fu_244_p2 = (!j1_reg_128.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(j1_reg_128.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void matrixmul::thread_j_fu_196_p2() {
    j_fu_196_p2 = (!j2_reg_106.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(j2_reg_106.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void matrixmul::thread_k_1_fu_269_p2() {
    k_1_fu_269_p2 = (!k_reg_139.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(k_reg_139.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void matrixmul::thread_m_fu_150_p2() {
    m_fu_150_p2 = (!lm.read().is_01())? sc_lv<32>(): ap_const_lv32_1 << (unsigned short)lm.read().to_uint();
}

void matrixmul::thread_n_fu_156_p2() {
    n_fu_156_p2 = (!ln.read().is_01())? sc_lv<32>(): ap_const_lv32_1 << (unsigned short)ln.read().to_uint();
}

void matrixmul::thread_p_fu_162_p2() {
    p_fu_162_p2 = (!lp.read().is_01())? sc_lv<32>(): ap_const_lv32_1 << (unsigned short)lp.read().to_uint();
}

void matrixmul::thread_tmp_10_cast_fu_259_p1() {
    tmp_10_cast_fu_259_p1 = esl_sext<64,12>(tmp_s_fu_254_p2.read());
}

void matrixmul::thread_tmp_10_fu_301_p2() {
    tmp_10_fu_301_p2 = (!tmp_13_cast_fu_293_p3.read().is_01() || !tmp_5_reg_385.read().is_01())? sc_lv<12>(): (sc_biguint<12>(tmp_13_cast_fu_293_p3.read()) + sc_biguint<12>(tmp_5_reg_385.read()));
}

void matrixmul::thread_tmp_11_cast_fu_284_p1() {
    tmp_11_cast_fu_284_p1 = esl_sext<64,12>(tmp_7_fu_279_p2.read());
}

void matrixmul::thread_tmp_13_cast_fu_293_p3() {
    tmp_13_cast_fu_293_p3 = esl_concat<7,5>(tmp_8_fu_289_p1.read(), ap_const_lv5_0);
}

void matrixmul::thread_tmp_14_cast_fu_306_p1() {
    tmp_14_cast_fu_306_p1 = esl_sext<64,12>(tmp_10_fu_301_p2.read());
}

void matrixmul::thread_tmp_1_cast_fu_183_p3() {
    tmp_1_cast_fu_183_p3 = esl_concat<7,5>(tmp_fu_179_p1.read(), ap_const_lv5_0);
}

void matrixmul::thread_tmp_1_fu_227_p1() {
    tmp_1_fu_227_p1 = i_reg_117.read().range(7-1, 0);
}

void matrixmul::thread_tmp_3_fu_202_p1() {
    tmp_3_fu_202_p1 = j2_reg_106.read().range(12-1, 0);
}

void matrixmul::thread_tmp_5_fu_250_p1() {
    tmp_5_fu_250_p1 = j1_reg_128.read().range(12-1, 0);
}

void matrixmul::thread_tmp_6_fu_275_p1() {
    tmp_6_fu_275_p1 = k_reg_139.read().range(12-1, 0);
}

void matrixmul::thread_tmp_7_cast_fu_231_p3() {
    tmp_7_cast_fu_231_p3 = esl_concat<7,5>(tmp_1_fu_227_p1.read(), ap_const_lv5_0);
}

void matrixmul::thread_tmp_7_fu_279_p2() {
    tmp_7_fu_279_p2 = (!tmp_7_cast_reg_371.read().is_01() || !tmp_6_fu_275_p1.read().is_01())? sc_lv<12>(): (sc_biguint<12>(tmp_7_cast_reg_371.read()) + sc_biguint<12>(tmp_6_fu_275_p1.read()));
}

void matrixmul::thread_tmp_8_fu_289_p1() {
    tmp_8_fu_289_p1 = k_reg_139.read().range(7-1, 0);
}

void matrixmul::thread_tmp_9_cast1_fu_211_p1() {
    tmp_9_cast1_fu_211_p1 = esl_sext<64,12>(tmp_9_fu_206_p2.read());
}

void matrixmul::thread_tmp_9_fu_206_p2() {
    tmp_9_fu_206_p2 = (!tmp_1_cast_reg_350.read().is_01() || !tmp_3_fu_202_p1.read().is_01())? sc_lv<12>(): (sc_biguint<12>(tmp_1_cast_reg_350.read()) + sc_biguint<12>(tmp_3_fu_202_p1.read()));
}

void matrixmul::thread_tmp_fu_179_p1() {
    tmp_fu_179_p1 = i1_reg_95.read().range(7-1, 0);
}

void matrixmul::thread_tmp_s_fu_254_p2() {
    tmp_s_fu_254_p2 = (!tmp_7_cast_reg_371.read().is_01() || !tmp_5_fu_250_p1.read().is_01())? sc_lv<12>(): (sc_biguint<12>(tmp_7_cast_reg_371.read()) + sc_biguint<12>(tmp_5_fu_250_p1.read()));
}

void matrixmul::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(exitcond4_fu_168_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(exitcond3_fu_191_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(exitcond2_fu_216_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(exitcond1_fu_239_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(exitcond_fu_264_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<8>) ("XXXXXXXX");
            break;
    }
}

void matrixmul::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"lm\" :  \"" << lm.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ln\" :  \"" << ln.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"lp\" :  \"" << lp.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_address0\" :  \"" << A_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_ce0\" :  \"" << A_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"A_q0\" :  \"" << A_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"B_address0\" :  \"" << B_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"B_ce0\" :  \"" << B_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"B_q0\" :  \"" << B_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"AB_address0\" :  \"" << AB_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"AB_ce0\" :  \"" << AB_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"AB_we0\" :  \"" << AB_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"AB_d0\" :  \"" << AB_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"AB_q0\" :  \"" << AB_q0.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

