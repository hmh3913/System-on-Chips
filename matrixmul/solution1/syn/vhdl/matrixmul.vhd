-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrixmul is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    lm : IN STD_LOGIC_VECTOR (31 downto 0);
    ln : IN STD_LOGIC_VECTOR (31 downto 0);
    lp : IN STD_LOGIC_VECTOR (31 downto 0);
    A_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    B_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    B_ce0 : OUT STD_LOGIC;
    B_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    AB_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    AB_ce0 : OUT STD_LOGIC;
    AB_we0 : OUT STD_LOGIC;
    AB_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    AB_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of matrixmul is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matrixmul,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.634000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=1,HLS_SYN_FF=476,HLS_SYN_LUT=755,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal m_fu_150_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_reg_325 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_fu_156_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_reg_330 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_fu_162_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_reg_336 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_fu_173_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_reg_345 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_1_cast_fu_183_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_1_cast_reg_350 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond4_fu_168_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_196_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_2_fu_221_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_reg_366 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_7_cast_fu_231_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_7_cast_reg_371 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond2_fu_216_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_244_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_1_reg_380 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_5_fu_250_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_5_reg_385 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond1_fu_239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal AB_addr_1_reg_390 : STD_LOGIC_VECTOR (9 downto 0);
    signal k_1_fu_269_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_1_reg_398 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal exitcond_fu_264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal A_load_reg_413 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal B_load_reg_418 : STD_LOGIC_VECTOR (7 downto 0);
    signal AB_load_reg_423 : STD_LOGIC_VECTOR (31 downto 0);
    signal i1_reg_95 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond3_fu_191_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j2_reg_106 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_117 : STD_LOGIC_VECTOR (31 downto 0);
    signal j1_reg_128 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_reg_139 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_9_cast1_fu_211_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_cast_fu_259_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_cast_fu_284_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_cast_fu_306_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_317_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_179_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_3_fu_202_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_9_fu_206_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_1_fu_227_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_s_fu_254_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_6_fu_275_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_7_fu_279_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_8_fu_289_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_13_cast_fu_293_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_10_fu_301_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_317_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_317_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_317_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_317_p10 : STD_LOGIC_VECTOR (15 downto 0);

    component matrixmul_mac_mulbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    matrixmul_mac_mulbkb_U1 : component matrixmul_mac_mulbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_317_p0,
        din1 => grp_fu_317_p1,
        din2 => AB_load_reg_423,
        dout => grp_fu_317_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i1_reg_95_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond3_fu_191_p2 = ap_const_lv1_1))) then 
                i1_reg_95 <= i_1_reg_345;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i1_reg_95 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i_reg_117_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_168_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_reg_117 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond1_fu_239_p2 = ap_const_lv1_1))) then 
                i_reg_117 <= i_2_reg_366;
            end if; 
        end if;
    end process;

    j1_reg_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond_fu_264_p2 = ap_const_lv1_1))) then 
                j1_reg_128 <= j_1_reg_380;
            elsif (((exitcond2_fu_216_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                j1_reg_128 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    j2_reg_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_168_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j2_reg_106 <= ap_const_lv32_0;
            elsif (((exitcond3_fu_191_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                j2_reg_106 <= j_fu_196_p2;
            end if; 
        end if;
    end process;

    k_reg_139_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_239_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                k_reg_139 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                k_reg_139 <= k_1_reg_398;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_239_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                AB_addr_1_reg_390 <= tmp_10_cast_fu_259_p1(10 - 1 downto 0);
                tmp_5_reg_385 <= tmp_5_fu_250_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                AB_load_reg_423 <= AB_q0;
                A_load_reg_413 <= A_q0;
                B_load_reg_418 <= B_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_1_reg_345 <= i_1_fu_173_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_2_reg_366 <= i_2_fu_221_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                j_1_reg_380 <= j_1_fu_244_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                k_1_reg_398 <= k_1_fu_269_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                m_reg_325 <= m_fu_150_p2;
                n_reg_330 <= n_fu_156_p2;
                p_reg_336 <= p_fu_162_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_168_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    tmp_1_cast_reg_350(11 downto 5) <= tmp_1_cast_fu_183_p3(11 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_216_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    tmp_7_cast_reg_371(11 downto 5) <= tmp_7_cast_fu_231_p3(11 downto 5);
            end if;
        end if;
    end process;
    tmp_1_cast_reg_350(4 downto 0) <= "00000";
    tmp_7_cast_reg_371(4 downto 0) <= "00000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond4_fu_168_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, exitcond2_fu_216_p2, ap_CS_fsm_state5, exitcond1_fu_239_p2, ap_CS_fsm_state6, exitcond_fu_264_p2, exitcond3_fu_191_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond4_fu_168_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond3_fu_191_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((exitcond2_fu_216_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond1_fu_239_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond_fu_264_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;

    AB_address0_assign_proc : process(ap_CS_fsm_state3, AB_addr_1_reg_390, ap_CS_fsm_state6, ap_CS_fsm_state8, tmp_9_cast1_fu_211_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            AB_address0 <= AB_addr_1_reg_390;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            AB_address0 <= tmp_9_cast1_fu_211_p1(10 - 1 downto 0);
        else 
            AB_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    AB_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            AB_ce0 <= ap_const_logic_1;
        else 
            AB_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    AB_d0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state8, grp_fu_317_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            AB_d0 <= grp_fu_317_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            AB_d0 <= ap_const_lv32_0;
        else 
            AB_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    AB_we0_assign_proc : process(ap_CS_fsm_state3, exitcond3_fu_191_p2, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or ((exitcond3_fu_191_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            AB_we0 <= ap_const_logic_1;
        else 
            AB_we0 <= ap_const_logic_0;
        end if; 
    end process;

    A_address0 <= tmp_11_cast_fu_284_p1(10 - 1 downto 0);

    A_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            A_ce0 <= ap_const_logic_1;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_address0 <= tmp_14_cast_fu_306_p1(10 - 1 downto 0);

    B_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            B_ce0 <= ap_const_logic_1;
        else 
            B_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_CS_fsm_state4, exitcond2_fu_216_p2)
    begin
        if (((exitcond2_fu_216_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4, exitcond2_fu_216_p2)
    begin
        if (((exitcond2_fu_216_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_239_p2 <= "1" when (j1_reg_128 = p_reg_336) else "0";
    exitcond2_fu_216_p2 <= "1" when (i_reg_117 = n_reg_330) else "0";
    exitcond3_fu_191_p2 <= "1" when (j2_reg_106 = p_reg_336) else "0";
    exitcond4_fu_168_p2 <= "1" when (i1_reg_95 = n_reg_330) else "0";
    exitcond_fu_264_p2 <= "1" when (k_reg_139 = m_reg_325) else "0";
    grp_fu_317_p0 <= grp_fu_317_p00(8 - 1 downto 0);
    grp_fu_317_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(A_load_reg_413),16));
    grp_fu_317_p1 <= grp_fu_317_p10(8 - 1 downto 0);
    grp_fu_317_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_load_reg_418),16));
    i_1_fu_173_p2 <= std_logic_vector(unsigned(i1_reg_95) + unsigned(ap_const_lv32_1));
    i_2_fu_221_p2 <= std_logic_vector(unsigned(i_reg_117) + unsigned(ap_const_lv32_1));
    j_1_fu_244_p2 <= std_logic_vector(unsigned(j1_reg_128) + unsigned(ap_const_lv32_1));
    j_fu_196_p2 <= std_logic_vector(unsigned(j2_reg_106) + unsigned(ap_const_lv32_1));
    k_1_fu_269_p2 <= std_logic_vector(unsigned(k_reg_139) + unsigned(ap_const_lv32_1));
    m_fu_150_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv32_1),to_integer(unsigned('0' & lm(31-1 downto 0)))));
    n_fu_156_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv32_1),to_integer(unsigned('0' & ln(31-1 downto 0)))));
    p_fu_162_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv32_1),to_integer(unsigned('0' & lp(31-1 downto 0)))));
        tmp_10_cast_fu_259_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_s_fu_254_p2),64));

    tmp_10_fu_301_p2 <= std_logic_vector(unsigned(tmp_13_cast_fu_293_p3) + unsigned(tmp_5_reg_385));
        tmp_11_cast_fu_284_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_7_fu_279_p2),64));

    tmp_13_cast_fu_293_p3 <= (tmp_8_fu_289_p1 & ap_const_lv5_0);
        tmp_14_cast_fu_306_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_10_fu_301_p2),64));

    tmp_1_cast_fu_183_p3 <= (tmp_fu_179_p1 & ap_const_lv5_0);
    tmp_1_fu_227_p1 <= i_reg_117(7 - 1 downto 0);
    tmp_3_fu_202_p1 <= j2_reg_106(12 - 1 downto 0);
    tmp_5_fu_250_p1 <= j1_reg_128(12 - 1 downto 0);
    tmp_6_fu_275_p1 <= k_reg_139(12 - 1 downto 0);
    tmp_7_cast_fu_231_p3 <= (tmp_1_fu_227_p1 & ap_const_lv5_0);
    tmp_7_fu_279_p2 <= std_logic_vector(unsigned(tmp_7_cast_reg_371) + unsigned(tmp_6_fu_275_p1));
    tmp_8_fu_289_p1 <= k_reg_139(7 - 1 downto 0);
        tmp_9_cast1_fu_211_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_9_fu_206_p2),64));

    tmp_9_fu_206_p2 <= std_logic_vector(unsigned(tmp_1_cast_reg_350) + unsigned(tmp_3_fu_202_p1));
    tmp_fu_179_p1 <= i1_reg_95(7 - 1 downto 0);
    tmp_s_fu_254_p2 <= std_logic_vector(unsigned(tmp_7_cast_reg_371) + unsigned(tmp_5_fu_250_p1));
end behav;
