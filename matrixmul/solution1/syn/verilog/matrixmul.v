// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matrixmul,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.634000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=1,HLS_SYN_FF=476,HLS_SYN_LUT=755,HLS_VERSION=2018_2}" *)

module matrixmul (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        lm,
        ln,
        lp,
        A_address0,
        A_ce0,
        A_q0,
        B_address0,
        B_ce0,
        B_q0,
        AB_address0,
        AB_ce0,
        AB_we0,
        AB_d0,
        AB_q0
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] lm;
input  [31:0] ln;
input  [31:0] lp;
output  [9:0] A_address0;
output   A_ce0;
input  [7:0] A_q0;
output  [9:0] B_address0;
output   B_ce0;
input  [7:0] B_q0;
output  [9:0] AB_address0;
output   AB_ce0;
output   AB_we0;
output  [31:0] AB_d0;
input  [31:0] AB_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg A_ce0;
reg B_ce0;
reg[9:0] AB_address0;
reg AB_ce0;
reg AB_we0;
reg[31:0] AB_d0;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] m_fu_150_p2;
reg   [31:0] m_reg_325;
wire   [31:0] n_fu_156_p2;
reg   [31:0] n_reg_330;
wire   [31:0] p_fu_162_p2;
reg   [31:0] p_reg_336;
wire   [31:0] i_1_fu_173_p2;
reg   [31:0] i_1_reg_345;
wire    ap_CS_fsm_state2;
wire   [11:0] tmp_1_cast_fu_183_p3;
reg   [11:0] tmp_1_cast_reg_350;
wire   [0:0] exitcond4_fu_168_p2;
wire   [31:0] j_fu_196_p2;
wire    ap_CS_fsm_state3;
wire   [31:0] i_2_fu_221_p2;
reg   [31:0] i_2_reg_366;
wire    ap_CS_fsm_state4;
wire   [11:0] tmp_7_cast_fu_231_p3;
reg   [11:0] tmp_7_cast_reg_371;
wire   [0:0] exitcond2_fu_216_p2;
wire   [31:0] j_1_fu_244_p2;
reg   [31:0] j_1_reg_380;
wire    ap_CS_fsm_state5;
wire   [11:0] tmp_5_fu_250_p1;
reg   [11:0] tmp_5_reg_385;
wire   [0:0] exitcond1_fu_239_p2;
reg   [9:0] AB_addr_1_reg_390;
wire   [31:0] k_1_fu_269_p2;
reg   [31:0] k_1_reg_398;
wire    ap_CS_fsm_state6;
wire   [0:0] exitcond_fu_264_p2;
reg   [7:0] A_load_reg_413;
wire    ap_CS_fsm_state7;
reg   [7:0] B_load_reg_418;
reg   [31:0] AB_load_reg_423;
reg   [31:0] i1_reg_95;
wire   [0:0] exitcond3_fu_191_p2;
reg   [31:0] j2_reg_106;
reg   [31:0] i_reg_117;
reg   [31:0] j1_reg_128;
reg   [31:0] k_reg_139;
wire    ap_CS_fsm_state8;
wire  signed [63:0] tmp_9_cast1_fu_211_p1;
wire  signed [63:0] tmp_10_cast_fu_259_p1;
wire  signed [63:0] tmp_11_cast_fu_284_p1;
wire  signed [63:0] tmp_14_cast_fu_306_p1;
wire   [31:0] grp_fu_317_p3;
wire   [6:0] tmp_fu_179_p1;
wire   [11:0] tmp_3_fu_202_p1;
wire   [11:0] tmp_9_fu_206_p2;
wire   [6:0] tmp_1_fu_227_p1;
wire   [11:0] tmp_s_fu_254_p2;
wire   [11:0] tmp_6_fu_275_p1;
wire   [11:0] tmp_7_fu_279_p2;
wire   [6:0] tmp_8_fu_289_p1;
wire   [11:0] tmp_13_cast_fu_293_p3;
wire   [11:0] tmp_10_fu_301_p2;
wire   [7:0] grp_fu_317_p0;
wire   [7:0] grp_fu_317_p1;
reg   [7:0] ap_NS_fsm;
wire   [15:0] grp_fu_317_p00;
wire   [15:0] grp_fu_317_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
end

matrixmul_mac_mulbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmul_mac_mulbkb_U1(
    .din0(grp_fu_317_p0),
    .din1(grp_fu_317_p1),
    .din2(AB_load_reg_423),
    .dout(grp_fu_317_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond3_fu_191_p2 == 1'd1))) begin
        i1_reg_95 <= i_1_reg_345;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i1_reg_95 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_168_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_117 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (exitcond1_fu_239_p2 == 1'd1))) begin
        i_reg_117 <= i_2_reg_366;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (exitcond_fu_264_p2 == 1'd1))) begin
        j1_reg_128 <= j_1_reg_380;
    end else if (((exitcond2_fu_216_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        j1_reg_128 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_168_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j2_reg_106 <= 32'd0;
    end else if (((exitcond3_fu_191_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        j2_reg_106 <= j_fu_196_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_239_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        k_reg_139 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        k_reg_139 <= k_1_reg_398;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_239_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        AB_addr_1_reg_390 <= tmp_10_cast_fu_259_p1;
        tmp_5_reg_385 <= tmp_5_fu_250_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        AB_load_reg_423 <= AB_q0;
        A_load_reg_413 <= A_q0;
        B_load_reg_418 <= B_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_1_reg_345 <= i_1_fu_173_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_2_reg_366 <= i_2_fu_221_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        j_1_reg_380 <= j_1_fu_244_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        k_1_reg_398 <= k_1_fu_269_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        m_reg_325 <= m_fu_150_p2;
        n_reg_330 <= n_fu_156_p2;
        p_reg_336 <= p_fu_162_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_168_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_1_cast_reg_350[11 : 5] <= tmp_1_cast_fu_183_p3[11 : 5];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_216_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_7_cast_reg_371[11 : 5] <= tmp_7_cast_fu_231_p3[11 : 5];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6))) begin
        AB_address0 = AB_addr_1_reg_390;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        AB_address0 = tmp_9_cast1_fu_211_p1;
    end else begin
        AB_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6))) begin
        AB_ce0 = 1'b1;
    end else begin
        AB_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        AB_d0 = grp_fu_317_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        AB_d0 = 32'd0;
    end else begin
        AB_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | ((exitcond3_fu_191_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        AB_we0 = 1'b1;
    end else begin
        AB_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        B_ce0 = 1'b1;
    end else begin
        B_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond2_fu_216_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond2_fu_216_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond4_fu_168_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond3_fu_191_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond2_fu_216_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (exitcond1_fu_239_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (exitcond_fu_264_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_address0 = tmp_11_cast_fu_284_p1;

assign B_address0 = tmp_14_cast_fu_306_p1;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign exitcond1_fu_239_p2 = ((j1_reg_128 == p_reg_336) ? 1'b1 : 1'b0);

assign exitcond2_fu_216_p2 = ((i_reg_117 == n_reg_330) ? 1'b1 : 1'b0);

assign exitcond3_fu_191_p2 = ((j2_reg_106 == p_reg_336) ? 1'b1 : 1'b0);

assign exitcond4_fu_168_p2 = ((i1_reg_95 == n_reg_330) ? 1'b1 : 1'b0);

assign exitcond_fu_264_p2 = ((k_reg_139 == m_reg_325) ? 1'b1 : 1'b0);

assign grp_fu_317_p0 = grp_fu_317_p00;

assign grp_fu_317_p00 = A_load_reg_413;

assign grp_fu_317_p1 = grp_fu_317_p10;

assign grp_fu_317_p10 = B_load_reg_418;

assign i_1_fu_173_p2 = (i1_reg_95 + 32'd1);

assign i_2_fu_221_p2 = (i_reg_117 + 32'd1);

assign j_1_fu_244_p2 = (j1_reg_128 + 32'd1);

assign j_fu_196_p2 = (j2_reg_106 + 32'd1);

assign k_1_fu_269_p2 = (k_reg_139 + 32'd1);

assign m_fu_150_p2 = 32'd1 << lm;

assign n_fu_156_p2 = 32'd1 << ln;

assign p_fu_162_p2 = 32'd1 << lp;

assign tmp_10_cast_fu_259_p1 = $signed(tmp_s_fu_254_p2);

assign tmp_10_fu_301_p2 = (tmp_13_cast_fu_293_p3 + tmp_5_reg_385);

assign tmp_11_cast_fu_284_p1 = $signed(tmp_7_fu_279_p2);

assign tmp_13_cast_fu_293_p3 = {{tmp_8_fu_289_p1}, {5'd0}};

assign tmp_14_cast_fu_306_p1 = $signed(tmp_10_fu_301_p2);

assign tmp_1_cast_fu_183_p3 = {{tmp_fu_179_p1}, {5'd0}};

assign tmp_1_fu_227_p1 = i_reg_117[6:0];

assign tmp_3_fu_202_p1 = j2_reg_106[11:0];

assign tmp_5_fu_250_p1 = j1_reg_128[11:0];

assign tmp_6_fu_275_p1 = k_reg_139[11:0];

assign tmp_7_cast_fu_231_p3 = {{tmp_1_fu_227_p1}, {5'd0}};

assign tmp_7_fu_279_p2 = (tmp_7_cast_reg_371 + tmp_6_fu_275_p1);

assign tmp_8_fu_289_p1 = k_reg_139[6:0];

assign tmp_9_cast1_fu_211_p1 = $signed(tmp_9_fu_206_p2);

assign tmp_9_fu_206_p2 = (tmp_1_cast_reg_350 + tmp_3_fu_202_p1);

assign tmp_fu_179_p1 = i1_reg_95[6:0];

assign tmp_s_fu_254_p2 = (tmp_7_cast_reg_371 + tmp_5_fu_250_p1);

always @ (posedge ap_clk) begin
    tmp_1_cast_reg_350[4:0] <= 5'b00000;
    tmp_7_cast_reg_371[4:0] <= 5'b00000;
end

endmodule //matrixmul
