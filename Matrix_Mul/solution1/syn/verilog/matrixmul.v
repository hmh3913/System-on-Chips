// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matrixmul,hls_ip_2018_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.634000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=1,HLS_SYN_FF=776,HLS_SYN_LUT=1091,HLS_VERSION=2018_2}" *)

module matrixmul (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        lm,
        ln,
        lp,
        input_A_address0,
        input_A_ce0,
        input_A_q0,
        input_B_address0,
        input_B_ce0,
        input_B_q0,
        AB_address0,
        AB_ce0,
        AB_we0,
        AB_d0,
        AB_q0
);

parameter    ap_ST_fsm_state1 = 14'd1;
parameter    ap_ST_fsm_state2 = 14'd2;
parameter    ap_ST_fsm_state3 = 14'd4;
parameter    ap_ST_fsm_state4 = 14'd8;
parameter    ap_ST_fsm_state5 = 14'd16;
parameter    ap_ST_fsm_state6 = 14'd32;
parameter    ap_ST_fsm_state7 = 14'd64;
parameter    ap_ST_fsm_state8 = 14'd128;
parameter    ap_ST_fsm_state9 = 14'd256;
parameter    ap_ST_fsm_state10 = 14'd512;
parameter    ap_ST_fsm_state11 = 14'd1024;
parameter    ap_ST_fsm_state12 = 14'd2048;
parameter    ap_ST_fsm_state13 = 14'd4096;
parameter    ap_ST_fsm_state14 = 14'd8192;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] lm;
input  [31:0] ln;
input  [31:0] lp;
output  [9:0] input_A_address0;
output   input_A_ce0;
input  [7:0] input_A_q0;
output  [9:0] input_B_address0;
output   input_B_ce0;
input  [7:0] input_B_q0;
output  [9:0] AB_address0;
output   AB_ce0;
output   AB_we0;
output  [31:0] AB_d0;
input  [31:0] AB_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_A_ce0;
reg input_B_ce0;
reg[9:0] AB_address0;
reg AB_ce0;
reg AB_we0;
reg[31:0] AB_d0;

(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] m_fu_244_p2;
reg   [31:0] m_reg_515;
wire   [31:0] n_fu_250_p2;
reg   [31:0] n_reg_522;
wire   [31:0] p_fu_256_p2;
reg   [31:0] p_reg_529;
wire   [31:0] i_4_fu_267_p2;
reg   [31:0] i_4_reg_539;
wire    ap_CS_fsm_state2;
wire   [11:0] tmp_1_cast_fu_277_p3;
reg   [11:0] tmp_1_cast_reg_544;
wire   [0:0] exitcond8_fu_262_p2;
wire   [31:0] j_4_fu_290_p2;
reg   [31:0] j_4_reg_552;
wire    ap_CS_fsm_state3;
wire   [63:0] tmp_10_cast1_fu_305_p1;
reg   [63:0] tmp_10_cast1_reg_557;
wire   [0:0] exitcond7_fu_285_p2;
wire   [31:0] i_5_fu_315_p2;
reg   [31:0] i_5_reg_570;
wire    ap_CS_fsm_state5;
wire   [11:0] tmp_9_cast_fu_325_p3;
reg   [11:0] tmp_9_cast_reg_575;
wire   [0:0] exitcond6_fu_310_p2;
wire   [31:0] j_5_fu_338_p2;
reg   [31:0] j_5_reg_583;
wire    ap_CS_fsm_state6;
wire   [63:0] tmp_13_cast_fu_353_p1;
reg   [63:0] tmp_13_cast_reg_588;
wire   [0:0] exitcond5_fu_333_p2;
wire   [31:0] i_6_fu_363_p2;
reg   [31:0] i_6_reg_601;
wire    ap_CS_fsm_state8;
wire   [11:0] tmp_12_cast_fu_373_p3;
reg   [11:0] tmp_12_cast_reg_606;
wire   [0:0] exitcond4_fu_358_p2;
wire   [31:0] j_6_fu_386_p2;
wire    ap_CS_fsm_state9;
wire   [31:0] i_7_fu_411_p2;
reg   [31:0] i_7_reg_622;
wire    ap_CS_fsm_state10;
wire   [11:0] tmp_15_cast_fu_421_p3;
reg   [11:0] tmp_15_cast_reg_627;
wire   [0:0] exitcond2_fu_406_p2;
wire   [31:0] j_7_fu_434_p2;
reg   [31:0] j_7_reg_636;
wire    ap_CS_fsm_state11;
wire   [11:0] tmp_11_fu_440_p1;
reg   [11:0] tmp_11_reg_641;
wire   [0:0] exitcond1_fu_429_p2;
reg   [9:0] AB_addr_1_reg_646;
wire   [31:0] k_1_fu_459_p2;
reg   [31:0] k_1_reg_654;
wire    ap_CS_fsm_state12;
wire   [0:0] exitcond_fu_454_p2;
wire   [7:0] A_q0;
reg   [7:0] A_load_reg_669;
wire    ap_CS_fsm_state13;
wire   [7:0] B_q0;
reg   [7:0] B_load_reg_674;
reg   [31:0] AB_load_reg_679;
reg   [9:0] A_address0;
reg    A_ce0;
reg    A_we0;
reg   [9:0] B_address0;
reg    B_ce0;
reg    B_we0;
reg   [31:0] i_reg_145;
reg   [31:0] j_reg_156;
wire    ap_CS_fsm_state4;
reg   [31:0] i_1_reg_167;
reg   [31:0] j_1_reg_178;
wire    ap_CS_fsm_state7;
reg   [31:0] i_2_reg_189;
wire   [0:0] exitcond3_fu_381_p2;
reg   [31:0] j_2_reg_200;
reg   [31:0] i_3_reg_211;
reg   [31:0] j_3_reg_222;
reg   [31:0] k_reg_233;
wire    ap_CS_fsm_state14;
wire   [63:0] tmp_16_cast_fu_401_p1;
wire   [63:0] tmp_17_cast_fu_449_p1;
wire   [63:0] tmp_18_cast_fu_474_p1;
wire   [63:0] tmp_21_cast_fu_496_p1;
wire   [31:0] grp_fu_507_p3;
wire   [6:0] tmp_fu_273_p1;
wire   [11:0] tmp_2_fu_296_p1;
wire   [11:0] tmp_s_fu_300_p2;
wire   [6:0] tmp_1_fu_321_p1;
wire   [11:0] tmp_4_fu_344_p1;
wire   [11:0] tmp_5_fu_348_p2;
wire   [6:0] tmp_3_fu_369_p1;
wire   [11:0] tmp_9_fu_392_p1;
wire   [11:0] tmp_10_fu_396_p2;
wire   [6:0] tmp_7_fu_417_p1;
wire   [11:0] tmp_12_fu_444_p2;
wire   [11:0] tmp_13_fu_465_p1;
wire   [11:0] tmp_14_fu_469_p2;
wire   [6:0] tmp_15_fu_479_p1;
wire   [11:0] tmp_20_cast_fu_483_p3;
wire   [11:0] tmp_16_fu_491_p2;
wire   [7:0] grp_fu_507_p0;
wire   [7:0] grp_fu_507_p1;
reg   [13:0] ap_NS_fsm;
wire   [15:0] grp_fu_507_p00;
wire   [15:0] grp_fu_507_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 14'd1;
end

matrixmul_A #(
    .DataWidth( 8 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
A_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(A_address0),
    .ce0(A_ce0),
    .we0(A_we0),
    .d0(input_A_q0),
    .q0(A_q0)
);

matrixmul_A #(
    .DataWidth( 8 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
B_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(B_address0),
    .ce0(B_ce0),
    .we0(B_we0),
    .d0(input_B_q0),
    .q0(B_q0)
);

matrixmul_mac_mulbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmul_mac_mulbkb_U1(
    .din0(grp_fu_507_p0),
    .din1(grp_fu_507_p1),
    .din2(AB_load_reg_679),
    .dout(grp_fu_507_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond8_fu_262_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_1_reg_167 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (exitcond5_fu_333_p2 == 1'd1))) begin
        i_1_reg_167 <= i_5_reg_570;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond6_fu_310_p2 == 1'd1))) begin
        i_2_reg_189 <= 32'd0;
    end else if (((exitcond3_fu_381_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        i_2_reg_189 <= i_6_reg_601;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (exitcond4_fu_358_p2 == 1'd1))) begin
        i_3_reg_211 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state11) & (exitcond1_fu_429_p2 == 1'd1))) begin
        i_3_reg_211 <= i_7_reg_622;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond7_fu_285_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_reg_145 <= i_4_reg_539;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_145 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond6_fu_310_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        j_1_reg_178 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        j_1_reg_178 <= j_5_reg_583;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_358_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        j_2_reg_200 <= 32'd0;
    end else if (((exitcond3_fu_381_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        j_2_reg_200 <= j_6_fu_386_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_454_p2 == 1'd1))) begin
        j_3_reg_222 <= j_7_reg_636;
    end else if (((exitcond2_fu_406_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        j_3_reg_222 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond8_fu_262_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_156 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        j_reg_156 <= j_4_reg_552;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_429_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        k_reg_233 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        k_reg_233 <= k_1_reg_654;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_429_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        AB_addr_1_reg_646 <= tmp_17_cast_fu_449_p1;
        tmp_11_reg_641 <= tmp_11_fu_440_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        AB_load_reg_679 <= AB_q0;
        A_load_reg_669 <= A_q0;
        B_load_reg_674 <= B_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_4_reg_539 <= i_4_fu_267_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_5_reg_570 <= i_5_fu_315_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_6_reg_601 <= i_6_fu_363_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        i_7_reg_622 <= i_7_fu_411_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_4_reg_552 <= j_4_fu_290_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        j_5_reg_583 <= j_5_fu_338_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        j_7_reg_636 <= j_7_fu_434_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        k_1_reg_654 <= k_1_fu_459_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        m_reg_515 <= m_fu_244_p2;
        n_reg_522 <= n_fu_250_p2;
        p_reg_529 <= p_fu_256_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond7_fu_285_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_10_cast1_reg_557[11 : 0] <= tmp_10_cast1_fu_305_p1[11 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_358_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        tmp_12_cast_reg_606[11 : 5] <= tmp_12_cast_fu_373_p3[11 : 5];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_fu_333_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        tmp_13_cast_reg_588[11 : 0] <= tmp_13_cast_fu_353_p1[11 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_406_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        tmp_15_cast_reg_627[11 : 5] <= tmp_15_cast_fu_421_p3[11 : 5];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond8_fu_262_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_1_cast_reg_544[11 : 5] <= tmp_1_cast_fu_277_p3[11 : 5];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond6_fu_310_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        tmp_9_cast_reg_575[11 : 5] <= tmp_9_cast_fu_325_p3[11 : 5];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12))) begin
        AB_address0 = AB_addr_1_reg_646;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        AB_address0 = tmp_16_cast_fu_401_p1;
    end else begin
        AB_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state9))) begin
        AB_ce0 = 1'b1;
    end else begin
        AB_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        AB_d0 = grp_fu_507_p3;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        AB_d0 = 32'd0;
    end else begin
        AB_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | ((exitcond3_fu_381_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9)))) begin
        AB_we0 = 1'b1;
    end else begin
        AB_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        A_address0 = tmp_18_cast_fu_474_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        A_address0 = tmp_10_cast1_reg_557;
    end else begin
        A_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state12))) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        A_we0 = 1'b1;
    end else begin
        A_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        B_address0 = tmp_21_cast_fu_496_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        B_address0 = tmp_13_cast_reg_588;
    end else begin
        B_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state12))) begin
        B_ce0 = 1'b1;
    end else begin
        B_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        B_we0 = 1'b1;
    end else begin
        B_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (exitcond2_fu_406_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (exitcond2_fu_406_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        input_A_ce0 = 1'b1;
    end else begin
        input_A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        input_B_ce0 = 1'b1;
    end else begin
        input_B_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond8_fu_262_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond7_fu_285_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (exitcond6_fu_310_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (exitcond5_fu_333_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (exitcond4_fu_358_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((exitcond3_fu_381_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (exitcond2_fu_406_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (exitcond1_fu_429_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_454_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign exitcond1_fu_429_p2 = ((j_3_reg_222 == p_reg_529) ? 1'b1 : 1'b0);

assign exitcond2_fu_406_p2 = ((i_3_reg_211 == n_reg_522) ? 1'b1 : 1'b0);

assign exitcond3_fu_381_p2 = ((j_2_reg_200 == p_reg_529) ? 1'b1 : 1'b0);

assign exitcond4_fu_358_p2 = ((i_2_reg_189 == n_reg_522) ? 1'b1 : 1'b0);

assign exitcond5_fu_333_p2 = ((j_1_reg_178 == p_reg_529) ? 1'b1 : 1'b0);

assign exitcond6_fu_310_p2 = ((i_1_reg_167 == m_reg_515) ? 1'b1 : 1'b0);

assign exitcond7_fu_285_p2 = ((j_reg_156 == m_reg_515) ? 1'b1 : 1'b0);

assign exitcond8_fu_262_p2 = ((i_reg_145 == n_reg_522) ? 1'b1 : 1'b0);

assign exitcond_fu_454_p2 = ((k_reg_233 == m_reg_515) ? 1'b1 : 1'b0);

assign grp_fu_507_p0 = grp_fu_507_p00;

assign grp_fu_507_p00 = A_load_reg_669;

assign grp_fu_507_p1 = grp_fu_507_p10;

assign grp_fu_507_p10 = B_load_reg_674;

assign i_4_fu_267_p2 = (i_reg_145 + 32'd1);

assign i_5_fu_315_p2 = (i_1_reg_167 + 32'd1);

assign i_6_fu_363_p2 = (i_2_reg_189 + 32'd1);

assign i_7_fu_411_p2 = (i_3_reg_211 + 32'd1);

assign input_A_address0 = tmp_10_cast1_fu_305_p1;

assign input_B_address0 = tmp_13_cast_fu_353_p1;

assign j_4_fu_290_p2 = (j_reg_156 + 32'd1);

assign j_5_fu_338_p2 = (j_1_reg_178 + 32'd1);

assign j_6_fu_386_p2 = (j_2_reg_200 + 32'd1);

assign j_7_fu_434_p2 = (j_3_reg_222 + 32'd1);

assign k_1_fu_459_p2 = (k_reg_233 + 32'd1);

assign m_fu_244_p2 = 32'd1 << lm;

assign n_fu_250_p2 = 32'd1 << ln;

assign p_fu_256_p2 = 32'd1 << lp;

assign tmp_10_cast1_fu_305_p1 = tmp_s_fu_300_p2;

assign tmp_10_fu_396_p2 = (tmp_12_cast_reg_606 + tmp_9_fu_392_p1);

assign tmp_11_fu_440_p1 = j_3_reg_222[11:0];

assign tmp_12_cast_fu_373_p3 = {{tmp_3_fu_369_p1}, {5'd0}};

assign tmp_12_fu_444_p2 = (tmp_15_cast_reg_627 + tmp_11_fu_440_p1);

assign tmp_13_cast_fu_353_p1 = tmp_5_fu_348_p2;

assign tmp_13_fu_465_p1 = k_reg_233[11:0];

assign tmp_14_fu_469_p2 = (tmp_15_cast_reg_627 + tmp_13_fu_465_p1);

assign tmp_15_cast_fu_421_p3 = {{tmp_7_fu_417_p1}, {5'd0}};

assign tmp_15_fu_479_p1 = k_reg_233[6:0];

assign tmp_16_cast_fu_401_p1 = tmp_10_fu_396_p2;

assign tmp_16_fu_491_p2 = (tmp_20_cast_fu_483_p3 + tmp_11_reg_641);

assign tmp_17_cast_fu_449_p1 = tmp_12_fu_444_p2;

assign tmp_18_cast_fu_474_p1 = tmp_14_fu_469_p2;

assign tmp_1_cast_fu_277_p3 = {{tmp_fu_273_p1}, {5'd0}};

assign tmp_1_fu_321_p1 = i_1_reg_167[6:0];

assign tmp_20_cast_fu_483_p3 = {{tmp_15_fu_479_p1}, {5'd0}};

assign tmp_21_cast_fu_496_p1 = tmp_16_fu_491_p2;

assign tmp_2_fu_296_p1 = j_reg_156[11:0];

assign tmp_3_fu_369_p1 = i_2_reg_189[6:0];

assign tmp_4_fu_344_p1 = j_1_reg_178[11:0];

assign tmp_5_fu_348_p2 = (tmp_9_cast_reg_575 + tmp_4_fu_344_p1);

assign tmp_7_fu_417_p1 = i_3_reg_211[6:0];

assign tmp_9_cast_fu_325_p3 = {{tmp_1_fu_321_p1}, {5'd0}};

assign tmp_9_fu_392_p1 = j_2_reg_200[11:0];

assign tmp_fu_273_p1 = i_reg_145[6:0];

assign tmp_s_fu_300_p2 = (tmp_1_cast_reg_544 + tmp_2_fu_296_p1);

always @ (posedge ap_clk) begin
    tmp_1_cast_reg_544[4:0] <= 5'b00000;
    tmp_10_cast1_reg_557[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
    tmp_9_cast_reg_575[4:0] <= 5'b00000;
    tmp_13_cast_reg_588[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
    tmp_12_cast_reg_606[4:0] <= 5'b00000;
    tmp_15_cast_reg_627[4:0] <= 5'b00000;
end

endmodule //matrixmul
