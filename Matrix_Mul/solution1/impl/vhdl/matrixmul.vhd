-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrixmul is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    lm : IN STD_LOGIC_VECTOR (31 downto 0);
    ln : IN STD_LOGIC_VECTOR (31 downto 0);
    lp : IN STD_LOGIC_VECTOR (31 downto 0);
    input_A_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_A_ce0 : OUT STD_LOGIC;
    input_A_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    input_B_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_B_ce0 : OUT STD_LOGIC;
    input_B_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    AB_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    AB_ce0 : OUT STD_LOGIC;
    AB_we0 : OUT STD_LOGIC;
    AB_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    AB_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of matrixmul is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matrixmul,hls_ip_2018_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.634000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=1,HLS_SYN_FF=776,HLS_SYN_LUT=1091,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal m_fu_244_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_reg_515 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_fu_250_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_reg_522 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_fu_256_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_reg_529 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_4_fu_267_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_4_reg_539 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_1_cast_fu_277_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_1_cast_reg_544 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond8_fu_262_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_4_fu_290_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_4_reg_552 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_10_cast1_fu_305_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_cast1_reg_557 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond7_fu_285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_5_fu_315_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_5_reg_570 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_9_cast_fu_325_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_9_cast_reg_575 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond6_fu_310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_5_fu_338_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_5_reg_583 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_13_cast_fu_353_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_cast_reg_588 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond5_fu_333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_6_fu_363_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_6_reg_601 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_12_cast_fu_373_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_12_cast_reg_606 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond4_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_6_fu_386_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal i_7_fu_411_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_7_reg_622 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_15_cast_fu_421_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_15_cast_reg_627 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond2_fu_406_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_7_fu_434_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_7_reg_636 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_11_fu_440_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_11_reg_641 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond1_fu_429_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal AB_addr_1_reg_646 : STD_LOGIC_VECTOR (9 downto 0);
    signal k_1_fu_459_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_1_reg_654 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal exitcond_fu_454_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal A_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_load_reg_669 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal B_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal B_load_reg_674 : STD_LOGIC_VECTOR (7 downto 0);
    signal AB_load_reg_679 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal A_ce0 : STD_LOGIC;
    signal A_we0 : STD_LOGIC;
    signal B_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal B_ce0 : STD_LOGIC;
    signal B_we0 : STD_LOGIC;
    signal i_reg_145 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_reg_156 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_1_reg_167 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_1_reg_178 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal i_2_reg_189 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond3_fu_381_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_2_reg_200 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_3_reg_211 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_3_reg_222 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_reg_233 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_16_cast_fu_401_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_17_cast_fu_449_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_cast_fu_474_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_21_cast_fu_496_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_507_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_273_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_2_fu_296_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_s_fu_300_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_1_fu_321_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_4_fu_344_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_5_fu_348_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_3_fu_369_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_9_fu_392_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_10_fu_396_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_7_fu_417_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_12_fu_444_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_13_fu_465_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_14_fu_469_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_15_fu_479_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_20_cast_fu_483_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_16_fu_491_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_507_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_507_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_507_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_507_p10 : STD_LOGIC_VECTOR (15 downto 0);

    component matrixmul_mac_mulbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component matrixmul_A IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    A_U : component matrixmul_A
    generic map (
        DataWidth => 8,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => A_address0,
        ce0 => A_ce0,
        we0 => A_we0,
        d0 => input_A_q0,
        q0 => A_q0);

    B_U : component matrixmul_A
    generic map (
        DataWidth => 8,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => B_address0,
        ce0 => B_ce0,
        we0 => B_we0,
        d0 => input_B_q0,
        q0 => B_q0);

    matrixmul_mac_mulbkb_U1 : component matrixmul_mac_mulbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_507_p0,
        din1 => grp_fu_507_p1,
        din2 => AB_load_reg_679,
        dout => grp_fu_507_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_1_reg_167_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond8_fu_262_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_1_reg_167 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond5_fu_333_p2 = ap_const_lv1_1))) then 
                i_1_reg_167 <= i_5_reg_570;
            end if; 
        end if;
    end process;

    i_2_reg_189_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond6_fu_310_p2 = ap_const_lv1_1))) then 
                i_2_reg_189 <= ap_const_lv32_0;
            elsif (((exitcond3_fu_381_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                i_2_reg_189 <= i_6_reg_601;
            end if; 
        end if;
    end process;

    i_3_reg_211_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond4_fu_358_p2 = ap_const_lv1_1))) then 
                i_3_reg_211 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond1_fu_429_p2 = ap_const_lv1_1))) then 
                i_3_reg_211 <= i_7_reg_622;
            end if; 
        end if;
    end process;

    i_reg_145_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond7_fu_285_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_reg_145 <= i_4_reg_539;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_145 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    j_1_reg_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond6_fu_310_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                j_1_reg_178 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                j_1_reg_178 <= j_5_reg_583;
            end if; 
        end if;
    end process;

    j_2_reg_200_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_358_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                j_2_reg_200 <= ap_const_lv32_0;
            elsif (((exitcond3_fu_381_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                j_2_reg_200 <= j_6_fu_386_p2;
            end if; 
        end if;
    end process;

    j_3_reg_222_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_454_p2 = ap_const_lv1_1))) then 
                j_3_reg_222 <= j_7_reg_636;
            elsif (((exitcond2_fu_406_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                j_3_reg_222 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    j_reg_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond8_fu_262_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_reg_156 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j_reg_156 <= j_4_reg_552;
            end if; 
        end if;
    end process;

    k_reg_233_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_429_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                k_reg_233 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                k_reg_233 <= k_1_reg_654;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_429_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                AB_addr_1_reg_646 <= tmp_17_cast_fu_449_p1(10 - 1 downto 0);
                tmp_11_reg_641 <= tmp_11_fu_440_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                AB_load_reg_679 <= AB_q0;
                A_load_reg_669 <= A_q0;
                B_load_reg_674 <= B_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_4_reg_539 <= i_4_fu_267_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                i_5_reg_570 <= i_5_fu_315_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                i_6_reg_601 <= i_6_fu_363_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                i_7_reg_622 <= i_7_fu_411_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_4_reg_552 <= j_4_fu_290_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                j_5_reg_583 <= j_5_fu_338_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                j_7_reg_636 <= j_7_fu_434_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                k_1_reg_654 <= k_1_fu_459_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                m_reg_515 <= m_fu_244_p2;
                n_reg_522 <= n_fu_250_p2;
                p_reg_529 <= p_fu_256_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond7_fu_285_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    tmp_10_cast1_reg_557(11 downto 0) <= tmp_10_cast1_fu_305_p1(11 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_358_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    tmp_12_cast_reg_606(11 downto 5) <= tmp_12_cast_fu_373_p3(11 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_333_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    tmp_13_cast_reg_588(11 downto 0) <= tmp_13_cast_fu_353_p1(11 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_406_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    tmp_15_cast_reg_627(11 downto 5) <= tmp_15_cast_fu_421_p3(11 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond8_fu_262_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    tmp_1_cast_reg_544(11 downto 5) <= tmp_1_cast_fu_277_p3(11 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond6_fu_310_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    tmp_9_cast_reg_575(11 downto 5) <= tmp_9_cast_fu_325_p3(11 downto 5);
            end if;
        end if;
    end process;
    tmp_1_cast_reg_544(4 downto 0) <= "00000";
    tmp_10_cast1_reg_557(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    tmp_9_cast_reg_575(4 downto 0) <= "00000";
    tmp_13_cast_reg_588(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    tmp_12_cast_reg_606(4 downto 0) <= "00000";
    tmp_15_cast_reg_627(4 downto 0) <= "00000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond8_fu_262_p2, ap_CS_fsm_state3, exitcond7_fu_285_p2, ap_CS_fsm_state5, exitcond6_fu_310_p2, ap_CS_fsm_state6, exitcond5_fu_333_p2, ap_CS_fsm_state8, exitcond4_fu_358_p2, ap_CS_fsm_state9, ap_CS_fsm_state10, exitcond2_fu_406_p2, ap_CS_fsm_state11, exitcond1_fu_429_p2, ap_CS_fsm_state12, exitcond_fu_454_p2, exitcond3_fu_381_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond8_fu_262_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond7_fu_285_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond6_fu_310_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond5_fu_333_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond4_fu_358_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                if (((exitcond3_fu_381_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (exitcond2_fu_406_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond1_fu_429_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_454_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;

    AB_address0_assign_proc : process(ap_CS_fsm_state9, AB_addr_1_reg_646, ap_CS_fsm_state12, ap_CS_fsm_state14, tmp_16_cast_fu_401_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            AB_address0 <= AB_addr_1_reg_646;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            AB_address0 <= tmp_16_cast_fu_401_p1(10 - 1 downto 0);
        else 
            AB_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    AB_ce0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            AB_ce0 <= ap_const_logic_1;
        else 
            AB_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    AB_d0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state14, grp_fu_507_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            AB_d0 <= grp_fu_507_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            AB_d0 <= ap_const_lv32_0;
        else 
            AB_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    AB_we0_assign_proc : process(ap_CS_fsm_state9, exitcond3_fu_381_p2, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or ((exitcond3_fu_381_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            AB_we0 <= ap_const_logic_1;
        else 
            AB_we0 <= ap_const_logic_0;
        end if; 
    end process;


    A_address0_assign_proc : process(tmp_10_cast1_reg_557, ap_CS_fsm_state12, ap_CS_fsm_state4, tmp_18_cast_fu_474_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            A_address0 <= tmp_18_cast_fu_474_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_address0 <= tmp_10_cast1_reg_557(10 - 1 downto 0);
        else 
            A_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    A_ce0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            A_ce0 <= ap_const_logic_1;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_we0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_we0 <= ap_const_logic_1;
        else 
            A_we0 <= ap_const_logic_0;
        end if; 
    end process;


    B_address0_assign_proc : process(tmp_13_cast_reg_588, ap_CS_fsm_state12, ap_CS_fsm_state7, tmp_21_cast_fu_496_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            B_address0 <= tmp_21_cast_fu_496_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            B_address0 <= tmp_13_cast_reg_588(10 - 1 downto 0);
        else 
            B_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    B_ce0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            B_ce0 <= ap_const_logic_1;
        else 
            B_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    B_we0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            B_we0 <= ap_const_logic_1;
        else 
            B_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state10, exitcond2_fu_406_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (exitcond2_fu_406_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state10, exitcond2_fu_406_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (exitcond2_fu_406_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_429_p2 <= "1" when (j_3_reg_222 = p_reg_529) else "0";
    exitcond2_fu_406_p2 <= "1" when (i_3_reg_211 = n_reg_522) else "0";
    exitcond3_fu_381_p2 <= "1" when (j_2_reg_200 = p_reg_529) else "0";
    exitcond4_fu_358_p2 <= "1" when (i_2_reg_189 = n_reg_522) else "0";
    exitcond5_fu_333_p2 <= "1" when (j_1_reg_178 = p_reg_529) else "0";
    exitcond6_fu_310_p2 <= "1" when (i_1_reg_167 = m_reg_515) else "0";
    exitcond7_fu_285_p2 <= "1" when (j_reg_156 = m_reg_515) else "0";
    exitcond8_fu_262_p2 <= "1" when (i_reg_145 = n_reg_522) else "0";
    exitcond_fu_454_p2 <= "1" when (k_reg_233 = m_reg_515) else "0";
    grp_fu_507_p0 <= grp_fu_507_p00(8 - 1 downto 0);
    grp_fu_507_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(A_load_reg_669),16));
    grp_fu_507_p1 <= grp_fu_507_p10(8 - 1 downto 0);
    grp_fu_507_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_load_reg_674),16));
    i_4_fu_267_p2 <= std_logic_vector(unsigned(i_reg_145) + unsigned(ap_const_lv32_1));
    i_5_fu_315_p2 <= std_logic_vector(unsigned(i_1_reg_167) + unsigned(ap_const_lv32_1));
    i_6_fu_363_p2 <= std_logic_vector(unsigned(i_2_reg_189) + unsigned(ap_const_lv32_1));
    i_7_fu_411_p2 <= std_logic_vector(unsigned(i_3_reg_211) + unsigned(ap_const_lv32_1));
    input_A_address0 <= tmp_10_cast1_fu_305_p1(10 - 1 downto 0);

    input_A_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            input_A_ce0 <= ap_const_logic_1;
        else 
            input_A_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_B_address0 <= tmp_13_cast_fu_353_p1(10 - 1 downto 0);

    input_B_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            input_B_ce0 <= ap_const_logic_1;
        else 
            input_B_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_4_fu_290_p2 <= std_logic_vector(unsigned(j_reg_156) + unsigned(ap_const_lv32_1));
    j_5_fu_338_p2 <= std_logic_vector(unsigned(j_1_reg_178) + unsigned(ap_const_lv32_1));
    j_6_fu_386_p2 <= std_logic_vector(unsigned(j_2_reg_200) + unsigned(ap_const_lv32_1));
    j_7_fu_434_p2 <= std_logic_vector(unsigned(j_3_reg_222) + unsigned(ap_const_lv32_1));
    k_1_fu_459_p2 <= std_logic_vector(unsigned(k_reg_233) + unsigned(ap_const_lv32_1));
    m_fu_244_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv32_1),to_integer(unsigned('0' & lm(31-1 downto 0)))));
    n_fu_250_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv32_1),to_integer(unsigned('0' & ln(31-1 downto 0)))));
    p_fu_256_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv32_1),to_integer(unsigned('0' & lp(31-1 downto 0)))));
    tmp_10_cast1_fu_305_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_300_p2),64));
    tmp_10_fu_396_p2 <= std_logic_vector(unsigned(tmp_12_cast_reg_606) + unsigned(tmp_9_fu_392_p1));
    tmp_11_fu_440_p1 <= j_3_reg_222(12 - 1 downto 0);
    tmp_12_cast_fu_373_p3 <= (tmp_3_fu_369_p1 & ap_const_lv5_0);
    tmp_12_fu_444_p2 <= std_logic_vector(unsigned(tmp_15_cast_reg_627) + unsigned(tmp_11_fu_440_p1));
    tmp_13_cast_fu_353_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_348_p2),64));
    tmp_13_fu_465_p1 <= k_reg_233(12 - 1 downto 0);
    tmp_14_fu_469_p2 <= std_logic_vector(unsigned(tmp_15_cast_reg_627) + unsigned(tmp_13_fu_465_p1));
    tmp_15_cast_fu_421_p3 <= (tmp_7_fu_417_p1 & ap_const_lv5_0);
    tmp_15_fu_479_p1 <= k_reg_233(7 - 1 downto 0);
    tmp_16_cast_fu_401_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_396_p2),64));
    tmp_16_fu_491_p2 <= std_logic_vector(unsigned(tmp_20_cast_fu_483_p3) + unsigned(tmp_11_reg_641));
    tmp_17_cast_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_444_p2),64));
    tmp_18_cast_fu_474_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_469_p2),64));
    tmp_1_cast_fu_277_p3 <= (tmp_fu_273_p1 & ap_const_lv5_0);
    tmp_1_fu_321_p1 <= i_1_reg_167(7 - 1 downto 0);
    tmp_20_cast_fu_483_p3 <= (tmp_15_fu_479_p1 & ap_const_lv5_0);
    tmp_21_cast_fu_496_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_491_p2),64));
    tmp_2_fu_296_p1 <= j_reg_156(12 - 1 downto 0);
    tmp_3_fu_369_p1 <= i_2_reg_189(7 - 1 downto 0);
    tmp_4_fu_344_p1 <= j_1_reg_178(12 - 1 downto 0);
    tmp_5_fu_348_p2 <= std_logic_vector(unsigned(tmp_9_cast_reg_575) + unsigned(tmp_4_fu_344_p1));
    tmp_7_fu_417_p1 <= i_3_reg_211(7 - 1 downto 0);
    tmp_9_cast_fu_325_p3 <= (tmp_1_fu_321_p1 & ap_const_lv5_0);
    tmp_9_fu_392_p1 <= j_2_reg_200(12 - 1 downto 0);
    tmp_fu_273_p1 <= i_reg_145(7 - 1 downto 0);
    tmp_s_fu_300_p2 <= std_logic_vector(unsigned(tmp_1_cast_reg_544) + unsigned(tmp_2_fu_296_p1));
end behav;
